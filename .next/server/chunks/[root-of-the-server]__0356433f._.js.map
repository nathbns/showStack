{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 102, "column": 0}, "map": {"version":3,"sources":["file:///Users/nathan/Desktop/showStack/drizzle/db/schema.ts"],"sourcesContent":["import {\n  pgTable,\n  text,\n  timestamp,\n  boolean,\n  integer,\n  serial,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { eq } from \"drizzle-orm\";\n\nexport const user = pgTable(\"user\", {\n  id: text(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  emailVerified: boolean(\"email_verified\").notNull(),\n  image: text(\"image\"),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").notNull(),\n  updatedAt: timestamp(\"updated_at\").notNull(),\n  layoutConfig: text(\"layout_config\"),\n  shareCount: integer(\"share_count\").default(0).notNull(),\n});\n\nexport const session = pgTable(\"session\", {\n  id: text(\"id\").primaryKey(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  token: text(\"token\").notNull().unique(),\n  createdAt: timestamp(\"created_at\").notNull(),\n  updatedAt: timestamp(\"updated_at\").notNull(),\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  userId: text(\"user_id\")\n    .notNull()\n    .references(() => user.id, { onDelete: \"cascade\" }),\n});\n\nexport const sessionRelations = relations(session, ({ one }) => ({\n  user: one(user, {\n    fields: [session.userId],\n    references: [user.id],\n  }),\n}));\n\nexport const account = pgTable(\"account\", {\n  id: text(\"id\").primaryKey(),\n  accountId: text(\"account_id\").notNull(),\n  providerId: text(\"provider_id\").notNull(),\n  userId: text(\"user_id\")\n    .notNull()\n    .references(() => user.id, { onDelete: \"cascade\" }),\n  accessToken: text(\"access_token\"),\n  refreshToken: text(\"refresh_token\"),\n  idToken: text(\"id_token\"),\n  accessTokenExpiresAt: timestamp(\"access_token_expires_at\"),\n  refreshTokenExpiresAt: timestamp(\"refresh_token_expires_at\"),\n  scope: text(\"scope\"),\n  password: text(\"password\"),\n  createdAt: timestamp(\"created_at\").notNull(),\n  updatedAt: timestamp(\"updated_at\").notNull(),\n});\n\nexport const accountRelations = relations(account, ({ one }) => ({\n  user: one(user, {\n    fields: [account.userId],\n    references: [user.id],\n  }),\n}));\n\nexport const verification = pgTable(\"verification\", {\n  id: text(\"id\").primaryKey(),\n  identifier: text(\"identifier\").notNull(),\n  value: text(\"value\").notNull(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\"),\n  updatedAt: timestamp(\"updated_at\"),\n});\n\nexport const userStackTechnologies = pgTable(\"user_stack_technology\", {\n  id: text(\"id\").primaryKey(),\n  userId: text(\"user_id\")\n    .notNull()\n    .references(() => user.id, { onDelete: \"cascade\" }),\n  name: text(\"name\").notNull(),\n  version: text(\"version\"),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const userStackTechnologiesRelations = relations(\n  userStackTechnologies,\n  ({ one }) => ({\n    user: one(user, {\n      fields: [userStackTechnologies.userId],\n      references: [user.id],\n    }),\n  })\n);\n\nexport const techStack = pgTable(\"tech_stack\", {\n  id: serial(\"id\").primaryKey(),\n  userId: text(\"user_id\")\n    .notNull()\n    .unique() // Un seul techStack par utilisateur\n    .references(() => user.id, { onDelete: \"cascade\" }),\n  upvotes: integer(\"upvotes\").default(0).notNull(),\n  showStripeCard: boolean(\"show_stripe_card\").default(false).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n  stripeCardColSpan: integer(\"stripe_card_col_span\").default(1).notNull(),\n  stripeCardRowSpan: integer(\"stripe_card_row_span\").default(1).notNull(),\n  stripeCardOrder: integer(\"stripe_card_order\").default(0).notNull(),\n});\n\nexport const stackTechnologyItem = pgTable(\"stack_technology_item\", {\n  id: serial(\"id\").primaryKey(),\n  techStackId: integer(\"tech_stack_id\")\n    .notNull()\n    .references(() => techStack.id, { onDelete: \"cascade\" }),\n  technologyId: text(\"technology_id\").notNull(), // ex: \"typescript\", \"react\", or custom ID\n  name: text(\"name\").notNull(),\n  color: text(\"color\").notNull(),\n  category: text(\"category\").notNull(), // ex: \"Frontend\", \"Backend\", \"Custom\"\n  gridCols: integer(\"grid_cols\").default(1),\n  gridRows: integer(\"grid_rows\").default(1),\n  isProject: boolean(\"is_project\").default(false),\n  favicon: text(\"favicon\"),\n  url: text(\"url\"),\n  description: text(\"description\"),\n  order: integer(\"order\").default(0),\n  stars: integer(\"stars\").default(0),\n  forks: integer(\"forks\").default(0),\n  mrr: integer(\"mrr\"), // Revenu Mensuel Récurrent en centimes\n  mrrCurrency: text(\"mrr_currency\"), // Ex: \"USD\", \"EUR\"\n});\n\nexport const techStackRelations = relations(techStack, ({ one, many }) => ({\n  user: one(user, {\n    fields: [techStack.userId],\n    references: [user.id],\n  }),\n  technologies: many(stackTechnologyItem),\n}));\n\nexport const stackTechnologyItemRelations = relations(\n  stackTechnologyItem,\n  ({ one }) => ({\n    techStack: one(techStack, {\n      fields: [stackTechnologyItem.techStackId],\n      references: [techStack.id],\n    }),\n  })\n);\n\n// Table pour les connexions Stripe\nexport const stripeConnection = pgTable(\"stripe_connection\", {\n  id: serial(\"id\").primaryKey(),\n  userId: text(\"user_id\")\n    .notNull()\n    .references(() => user.id, { onDelete: \"cascade\" })\n    .unique(), // Un utilisateur = une connexion Stripe\n  stripeUserId: text(\"stripe_user_id\").notNull(), // ID du compte Stripe connecté (acct_...)\n  accessToken: text(\"access_token\").notNull(), // DOIT être chiffré en BDD\n  refreshToken: text(\"refresh_token\"), // DOIT être chiffré en BDD\n  scope: text(\"scope\"), // Permissions accordées\n  livemode: boolean(\"livemode\").notNull(),\n  stripePublishableKey: text(\"stripe_publishable_key\"),\n  accessTokenExpiresAt: timestamp(\"access_token_expires_at\"), // Si applicable\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const stripeConnectionRelations = relations(\n  stripeConnection,\n  ({ one }) => ({\n    user: one(user, {\n      fields: [stripeConnection.userId],\n      references: [user.id],\n    }),\n  })\n);\n\n// Mettre à jour les relations utilisateur\nexport const userRelations = relations(user, ({ many, one }) => ({\n  sessions: many(session),\n  accounts: many(account),\n  stackTechnologies: many(userStackTechnologies), // Conserver si c'est une table différente/héritée\n  techStack: one(techStack), // Un seul techStack par utilisateur\n  stripeConnection: one(stripeConnection), // Ajout de la relation à la connexion Stripe\n}));\n\n/*\n// Requête préparée pour récupérer les technologies d'une stack avec toutes les colonnes\nexport const getTechStackWithTechnologies = (db) => async (stackId) => {\n  const result = await db.query.techStack.findFirst({\n    where: eq(techStack.id, stackId),\n    with: {\n      technologies: true\n    },\n  });\n  return result;\n};\n*/\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 323, "column": 0}, "map": {"version":3,"sources":["file:///Users/nathan/Desktop/showStack/drizzle/db/index.ts"],"sourcesContent":["import \"dotenv/config\";\n\nimport { drizzle } from \"drizzle-orm/node-postgres\";\nimport { Pool } from \"pg\";\n\nimport * as schema from \"./schema\";\n\n// Vérifier si DATABASE_URL est définie\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL environment variable is not set or accessible.\"\n  );\n}\n\n// Créer un Pool de connexions\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL, // DATABASE_URL doit contenir ?sslmode=require\n});\n\n// Initialiser Drizzle avec le pool et le schéma\nexport const db = drizzle(pool, { schema });\n"],"names":[],"mappings":";;;AAAA;AAEA;AACA;AAEA;;;;;;;;;;AAEA,uCAAuC;AACvC,IAAI,CAAC,QAAQ,GAAG,CAAC,YAAY,EAAE;IAC7B,MAAM,IAAI,MACR;AAEJ;AAEA,8BAA8B;AAC9B,MAAM,OAAO,IAAI,oGAAA,CAAA,OAAI,CAAC;IACpB,kBAAkB,QAAQ,GAAG,CAAC,YAAY;AAC5C;AAGO,MAAM,KAAK,CAAA,GAAA,8JAAA,CAAA,UAAO,AAAD,EAAE,MAAM;IAAE,QAAA;AAAO","debugId":null}},
    {"offset": {"line": 397, "column": 0}, "map": {"version":3,"sources":["file:///Users/nathan/Desktop/showStack/lib/stripe-mrr.ts"],"sourcesContent":["import { db } from \"@/drizzle/db\";\nimport { stripeConnection } from \"@/drizzle/db/schema\";\nimport { eq } from \"drizzle-orm\";\nimport Stripe from \"stripe\";\n\n// Fonction pour calculer le MRR à partir des abonnements Stripe\n// (Cette fonction est identique à celle déjà utilisée)\nfunction calculateMrrFromSubscriptions(subscriptions: Stripe.Subscription[]): {\n  total: number;\n  currency: string;\n} {\n  let totalMrr = 0;\n  let currency: string | null = null;\n  subscriptions.forEach((sub) => {\n    if (sub.status === \"active\" || sub.status === \"trialing\") {\n      sub.items.data.forEach((item: Stripe.SubscriptionItem) => {\n        if (item.price && item.price.unit_amount && item.price.recurring) {\n          if (item.price.recurring.interval === \"month\") {\n            totalMrr += item.price.unit_amount * (item.quantity || 1);\n          } else if (item.price.recurring.interval === \"year\") {\n            totalMrr += (item.price.unit_amount / 12) * (item.quantity || 1);\n          }\n          if (!currency && item.price.currency) {\n            currency = item.price.currency;\n          }\n        }\n      });\n    }\n  });\n  const finalCurrency = currency || \"USD\"; // Monnaie par défaut si aucune n'est trouvée\n  return { total: Math.round(totalMrr), currency: finalCurrency.toUpperCase() };\n}\n\n// Fonction exportée pour récupérer le MRR pour un utilisateur spécifique\nexport async function fetchMrrForUser(\n  userId: string\n): Promise<{ total: number; currency: string } | null> {\n  try {\n    // 1. Récupérer la connexion Stripe de l'utilisateur depuis la table stripeConnection\n    const userStripeConn = await db.query.stripeConnection.findFirst({\n      where: eq(stripeConnection.userId, userId),\n      columns: {\n        // accessToken: true, // L'accessToken du compte connecté n'est pas utilisé pour lister les abos de cette manière\n        stripeUserId: true, // C'est l'ID du compte Stripe connecté (acct_...)\n      },\n    });\n\n    if (!userStripeConn || !userStripeConn.stripeUserId) {\n      console.warn(\n        `[fetchMrrForUser] Connexion Stripe (stripeUserId) non trouvée pour l'utilisateur ${userId}. Impossible de calculer le MRR.`\n      );\n      return { total: 0, currency: \"USD\" }; // Retourner 0 si pas de connexion\n    }\n\n    // 2. Utiliser la clé secrète de la plateforme Stripe\n    const platformStripeSecretKey = process.env.STRIPE_SECRET_KEY;\n    if (!platformStripeSecretKey) {\n      console.error(\n        \"[fetchMrrForUser] La variable d'environnement STRIPE_SECRET_KEY n'est pas configurée.\"\n      );\n      throw new Error(\"Configuration Stripe incomplète côté serveur.\");\n    }\n\n    const stripe = new Stripe(platformStripeSecretKey, { typescript: true });\n\n    // 3. Récupérer les abonnements Stripe pour le compte connecté spécifié\n    const subscriptions = await stripe.subscriptions.list(\n      { limit: 100, status: \"all\" }, // 'status: \"all\"' car calculateMrrFromSubscriptions filtre déjà par 'active' ou 'trialing'\n      { stripeAccount: userStripeConn.stripeUserId } // Crucial: effectuer la requête AU NOM du compte connecté\n    );\n\n    // 4. Calculer le MRR\n    return calculateMrrFromSubscriptions(subscriptions.data);\n  } catch (error) {\n    console.error(\n      `[fetchMrrForUser] Erreur lors de la récupération du MRR pour l'utilisateur ${userId}:`,\n      error\n    );\n    // En cas d'erreur pendant l'appel à Stripe ou autre, retourner 0 pour éviter de casser le reste.\n    return { total: 0, currency: \"USD\" };\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;;;;;AAEA,gEAAgE;AAChE,uDAAuD;AACvD,SAAS,8BAA8B,aAAoC;IAIzE,IAAI,WAAW;IACf,IAAI,WAA0B;IAC9B,cAAc,OAAO,CAAC,CAAC;QACrB,IAAI,IAAI,MAAM,KAAK,YAAY,IAAI,MAAM,KAAK,YAAY;YACxD,IAAI,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBACtB,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,CAAC,WAAW,IAAI,KAAK,KAAK,CAAC,SAAS,EAAE;oBAChE,IAAI,KAAK,KAAK,CAAC,SAAS,CAAC,QAAQ,KAAK,SAAS;wBAC7C,YAAY,KAAK,KAAK,CAAC,WAAW,GAAG,CAAC,KAAK,QAAQ,IAAI,CAAC;oBAC1D,OAAO,IAAI,KAAK,KAAK,CAAC,SAAS,CAAC,QAAQ,KAAK,QAAQ;wBACnD,YAAY,AAAC,KAAK,KAAK,CAAC,WAAW,GAAG,KAAM,CAAC,KAAK,QAAQ,IAAI,CAAC;oBACjE;oBACA,IAAI,CAAC,YAAY,KAAK,KAAK,CAAC,QAAQ,EAAE;wBACpC,WAAW,KAAK,KAAK,CAAC,QAAQ;oBAChC;gBACF;YACF;QACF;IACF;IACA,MAAM,gBAAgB,YAAY,OAAO,6CAA6C;IACtF,OAAO;QAAE,OAAO,KAAK,KAAK,CAAC;QAAW,UAAU,cAAc,WAAW;IAAG;AAC9E;AAGO,eAAe,gBACpB,MAAc;IAEd,IAAI;QACF,qFAAqF;QACrF,MAAM,iBAAiB,MAAM,wHAAA,CAAA,KAAE,CAAC,KAAK,CAAC,gBAAgB,CAAC,SAAS,CAAC;YAC/D,OAAO,CAAA,GAAA,oKAAA,CAAA,KAAE,AAAD,EAAE,yHAAA,CAAA,mBAAgB,CAAC,MAAM,EAAE;YACnC,SAAS;gBACP,iHAAiH;gBACjH,cAAc;YAChB;QACF;QAEA,IAAI,CAAC,kBAAkB,CAAC,eAAe,YAAY,EAAE;YACnD,QAAQ,IAAI,CACV,CAAC,iFAAiF,EAAE,OAAO,gCAAgC,CAAC;YAE9H,OAAO;gBAAE,OAAO;gBAAG,UAAU;YAAM,GAAG,kCAAkC;QAC1E;QAEA,qDAAqD;QACrD,MAAM,0BAA0B,QAAQ,GAAG,CAAC,iBAAiB;QAC7D,IAAI,CAAC,yBAAyB;YAC5B,QAAQ,KAAK,CACX;YAEF,MAAM,IAAI,MAAM;QAClB;QAEA,MAAM,SAAS,IAAI,wJAAA,CAAA,UAAM,CAAC,yBAAyB;YAAE,YAAY;QAAK;QAEtE,uEAAuE;QACvE,MAAM,gBAAgB,MAAM,OAAO,aAAa,CAAC,IAAI,CACnD;YAAE,OAAO;YAAK,QAAQ;QAAM,GAC5B;YAAE,eAAe,eAAe,YAAY;QAAC,EAAE,0DAA0D;;QAG3G,qBAAqB;QACrB,OAAO,8BAA8B,cAAc,IAAI;IACzD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CACX,CAAC,2EAA2E,EAAE,OAAO,CAAC,CAAC,EACvF;QAEF,iGAAiG;QACjG,OAAO;YAAE,OAAO;YAAG,UAAU;QAAM;IACrC;AACF","debugId":null}},
    {"offset": {"line": 491, "column": 0}, "map": {"version":3,"sources":["file:///Users/nathan/Desktop/showStack/app/api/profile/%5BuserId%5D/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport { db } from \"@/drizzle/db\";\nimport {\n  user,\n  techStack,\n  stackTechnologyItem,\n  stripeConnection, // Modifié: utilise stripeConnection au lieu de account\n} from \"@/drizzle/db/schema\";\nimport { eq, asc, and, isNotNull } from \"drizzle-orm\";\nimport { fetchMrrForUser } from \"@/lib/stripe-mrr\";\n\nconst STRIPE_CARD_ID = \"internal_stripe_card\"; // Assurez-vous que c'est le même ID qu'ailleurs\n\ninterface ApiTechItemForProfile {\n  // Similaire à ApiTechItem mais pour ce contexte\n  id: string;\n  name: string;\n  color: string;\n  technologyId: string;\n  category: string;\n  gridCols: number;\n  gridRows: number;\n  isProject?: boolean;\n  favicon?: string;\n  url?: string;\n  description?: string;\n  order?: number;\n  stars?: number;\n  forks?: number;\n  mrr?: number; // Ajout pour le MRR\n  mrrCurrency?: string; // Ajout pour la devise du MRR\n  isStripeCard?: boolean; // Ajouter ce champ pour faciliter le rendu conditionnel sur le front-end\n  // Champs spécifiques à Stripe, si nécessaire pour l'affichage (normalement pas, car StripeCard s'en occupe)\n  // isStripeCard?: boolean; // Peut être utile pour le frontend pour le rendu conditionnel si TechDisplayCard est utilisé\n}\n\nexport async function GET(\n  request: Request,\n  context: { params: { userId: string } } // Modifié: Utilisation de context\n) {\n  const userId = context.params.userId; // Modifié: Extraction depuis context.params\n\n  if (!userId) {\n    return NextResponse.json({ error: \"User ID is required\" }, { status: 400 });\n  }\n\n  try {\n    // 1. Récupérer les informations de l'utilisateur\n    const userInfoFromDb = await db.query.user.findFirst({\n      where: eq(user.id, userId),\n      columns: {\n        id: true,\n        name: true,\n        email: true, // Optionnel: décidez si l'email doit être public\n        image: true,\n        description: true,\n        createdAt: true,\n        layoutConfig: true,\n        shareCount: true,\n      },\n    });\n\n    if (!userInfoFromDb) {\n      return NextResponse.json({ error: \"User not found\" }, { status: 404 });\n    }\n\n    // 2. Vérifier la connexion Stripe pour cet utilisateur directement dans stripeConnection\n    // Utiliser la même table que fetchMrrForUser pour assurer la cohérence\n    const stripeConnectionInfo = await db.query.stripeConnection.findFirst({\n      where: eq(stripeConnection.userId, userId),\n      columns: {\n        stripeUserId: true, // Vérifions vraiment que l'ID du compte Stripe existe\n      },\n    });\n\n    const hasStripeConnection = !!stripeConnectionInfo?.stripeUserId;\n\n    // Combiner les informations utilisateur avec le statut de connexion Stripe\n    const userInfo = {\n      ...userInfoFromDb,\n      hasStripeConnection,\n    };\n\n    // 3. Récupérer les stacks technologiques de l'utilisateur\n    const userStacksFromDb = await db.query.techStack.findMany({\n      where: eq(techStack.userId, userId),\n      with: {\n        technologies: {\n          columns: {\n            id: true, // C'est l'ID de stackTechnologyItem\n            name: true,\n            color: true,\n            technologyId: true,\n            category: true,\n            gridCols: true,\n            gridRows: true,\n            url: true,\n            isProject: true,\n            description: true,\n            favicon: true,\n            order: true,\n          },\n          orderBy: (stackTechnologyItem, { asc }) => [\n            asc(stackTechnologyItem.order),\n          ],\n        },\n      },\n      orderBy: (techStack, { asc }) => [asc(techStack.createdAt)],\n    });\n\n    // Injecter la carte Stripe si nécessaire\n    const userStacksWithPossibleStripeCard = await Promise.all(\n      userStacksFromDb.map(async (stack) => {\n        let technologiesFromStack: ApiTechItemForProfile[] = (\n          stack.technologies as any[]\n        ).map((tech) => ({\n          ...tech,\n          id: String(tech.id),\n          gridCols: tech.gridCols || 1,\n          gridRows: tech.gridRows || 1,\n          isStripeCard: false, // Initialiser à false\n        }));\n\n        if (stack.showStripeCard) {\n          let mrrData = { total: 0, currency: \"USD\" };\n          if (hasStripeConnection) {\n            const fetchedMrr = await fetchMrrForUser(userId);\n            if (fetchedMrr) {\n              mrrData.total = fetchedMrr.total;\n              mrrData.currency = fetchedMrr.currency;\n            }\n          }\n\n          const stripeTechItem: ApiTechItemForProfile = {\n            id: STRIPE_CARD_ID,\n            name: \"Stripe MRR\",\n            color: \"#635BFF\",\n            technologyId: STRIPE_CARD_ID,\n            category: \"Services\",\n            gridCols: stack.stripeCardColSpan || 1,\n            gridRows: stack.stripeCardRowSpan || 1,\n            isProject: false,\n            order:\n              stack.stripeCardOrder === null ||\n              stack.stripeCardOrder === undefined\n                ? -1\n                : stack.stripeCardOrder,\n            mrr: mrrData.total,\n            mrrCurrency: mrrData.currency,\n            isStripeCard: true, // Marquer comme carte Stripe\n          };\n          technologiesFromStack.push(stripeTechItem);\n        }\n        technologiesFromStack.sort(\n          (a, b) => (a.order ?? Infinity) - (b.order ?? Infinity)\n        );\n        return {\n          ...stack,\n          technologies: technologiesFromStack,\n        };\n      })\n    );\n\n    // Enrichir les technologies avec les données GitHub si applicable\n    const processedStacks = await Promise.all(\n      userStacksWithPossibleStripeCard.map(async (stack) => {\n        const processedTechnologies = await Promise.all(\n          (stack.technologies || []).map(\n            async (techItem: ApiTechItemForProfile) => {\n              if (techItem.isStripeCard) {\n                return techItem;\n              }\n\n              if (\n                techItem.isProject &&\n                techItem.url &&\n                typeof techItem.url === \"string\" &&\n                techItem.url.startsWith(\"https://github.com/\")\n              ) {\n                try {\n                  const match = techItem.url.match(\n                    /github\\.com\\/([^/]+)\\/([^/]+)/\n                  );\n                  if (match) {\n                    const owner = match[1];\n                    const repoName = match[2].replace(/\\.git$/, \"\");\n\n                    const githubRes = await fetch(\n                      `https://api.github.com/repos/${owner}/${repoName}`,\n                      {}\n                    );\n\n                    if (githubRes.ok) {\n                      const githubData = await githubRes.json();\n                      return {\n                        ...techItem,\n                        description:\n                          githubData.description || techItem.description,\n                        stars: githubData.stargazers_count,\n                        forks: githubData.forks_count,\n                      };\n                    } else {\n                      console.warn(\n                        `Failed to fetch GitHub data for ${techItem.url}: ${\n                          githubRes.status\n                        } ${await githubRes.text()}`\n                      );\n                    }\n                  }\n                } catch (ghError) {\n                  console.error(\n                    `Error fetching GitHub data for ${techItem.url}:`,\n                    ghError\n                  );\n                }\n              }\n              return {\n                ...techItem,\n                isProject: techItem.isProject || false,\n                url: techItem.url || undefined,\n                description: techItem.description || undefined,\n                favicon: techItem.favicon || undefined,\n                stars: techItem.stars || undefined,\n                forks: techItem.forks || undefined,\n              };\n            }\n          )\n        );\n        return { ...stack, technologies: processedTechnologies };\n      })\n    );\n\n    return NextResponse.json({\n      user: userInfo,\n      stacks: processedStacks,\n    });\n  } catch (error) {\n    console.error(`Error fetching profile data for user ${userId}:`, error);\n    return NextResponse.json(\n      { error: \"Failed to fetch profile data\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}