{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 150, "column": 0}, "map": {"version":3,"sources":["file:///Users/nathan/Desktop/next/showStack/drizzle/db/schema.ts"],"sourcesContent":["import {\n  pgTable,\n  text,\n  timestamp,\n  boolean,\n  integer,\n  serial,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { eq } from \"drizzle-orm\";\n\nexport const user = pgTable(\"user\", {\n  id: text(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  emailVerified: boolean(\"email_verified\").notNull(),\n  image: text(\"image\"),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").notNull(),\n  updatedAt: timestamp(\"updated_at\").notNull(),\n});\n\nexport const session = pgTable(\"session\", {\n  id: text(\"id\").primaryKey(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  token: text(\"token\").notNull().unique(),\n  createdAt: timestamp(\"created_at\").notNull(),\n  updatedAt: timestamp(\"updated_at\").notNull(),\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  userId: text(\"user_id\")\n    .notNull()\n    .references(() => user.id, { onDelete: \"cascade\" }),\n});\n\nexport const sessionRelations = relations(session, ({ one }) => ({\n  user: one(user, {\n    fields: [session.userId],\n    references: [user.id],\n  }),\n}));\n\nexport const account = pgTable(\"account\", {\n  id: text(\"id\").primaryKey(),\n  accountId: text(\"account_id\").notNull(),\n  providerId: text(\"provider_id\").notNull(),\n  userId: text(\"user_id\")\n    .notNull()\n    .references(() => user.id, { onDelete: \"cascade\" }),\n  accessToken: text(\"access_token\"),\n  refreshToken: text(\"refresh_token\"),\n  idToken: text(\"id_token\"),\n  accessTokenExpiresAt: timestamp(\"access_token_expires_at\"),\n  refreshTokenExpiresAt: timestamp(\"refresh_token_expires_at\"),\n  scope: text(\"scope\"),\n  password: text(\"password\"),\n  createdAt: timestamp(\"created_at\").notNull(),\n  updatedAt: timestamp(\"updated_at\").notNull(),\n});\n\nexport const accountRelations = relations(account, ({ one }) => ({\n  user: one(user, {\n    fields: [account.userId],\n    references: [user.id],\n  }),\n}));\n\nexport const verification = pgTable(\"verification\", {\n  id: text(\"id\").primaryKey(),\n  identifier: text(\"identifier\").notNull(),\n  value: text(\"value\").notNull(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\"),\n  updatedAt: timestamp(\"updated_at\"),\n});\n\nexport const userStackTechnologies = pgTable(\"user_stack_technology\", {\n  id: text(\"id\").primaryKey(),\n  userId: text(\"user_id\")\n    .notNull()\n    .references(() => user.id, { onDelete: \"cascade\" }),\n  name: text(\"name\").notNull(),\n  version: text(\"version\"),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const userRelations = relations(user, ({ many }) => ({\n  sessions: many(session),\n  accounts: many(account),\n  stackTechnologies: many(userStackTechnologies),\n  techStacks: many(techStack),\n}));\n\nexport const userStackTechnologiesRelations = relations(\n  userStackTechnologies,\n  ({ one }) => ({\n    user: one(user, {\n      fields: [userStackTechnologies.userId],\n      references: [user.id],\n    }),\n  })\n);\n\nexport const techStack = pgTable(\"tech_stack\", {\n  id: serial(\"id\").primaryKey(),\n  userId: text(\"user_id\")\n    .notNull()\n    .references(() => user.id, { onDelete: \"cascade\" }),\n  name: text(\"name\"),\n  upvotes: integer(\"upvotes\").default(0).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const stackTechnologyItem = pgTable(\"stack_technology_item\", {\n  id: serial(\"id\").primaryKey(),\n  techStackId: integer(\"tech_stack_id\")\n    .notNull()\n    .references(() => techStack.id, { onDelete: \"cascade\" }),\n  technologyId: text(\"technology_id\").notNull(), // ex: \"typescript\", \"react\", or custom ID\n  name: text(\"name\").notNull(),\n  color: text(\"color\").notNull(),\n  category: text(\"category\").notNull(), // ex: \"Frontend\", \"Backend\", \"Custom\"\n  gridCols: integer(\"grid_cols\").default(1),\n  gridRows: integer(\"grid_rows\").default(1),\n});\n\nexport const techStackRelations = relations(techStack, ({ one, many }) => ({\n  user: one(user, {\n    fields: [techStack.userId],\n    references: [user.id],\n  }),\n  technologies: many(stackTechnologyItem),\n}));\n\nexport const stackTechnologyItemRelations = relations(\n  stackTechnologyItem,\n  ({ one }) => ({\n    techStack: one(techStack, {\n      fields: [stackTechnologyItem.techStackId],\n      references: [techStack.id],\n    }),\n  })\n);\n\n/*\n// Requête préparée pour récupérer les technologies d'une stack avec toutes les colonnes\nexport const getTechStackWithTechnologies = (db) => async (stackId) => {\n  const result = await db.query.techStack.findFirst({\n    where: eq(techStack.id, stackId),\n    with: {\n      technologies: true\n    },\n  });\n  return result;\n};\n*/\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 328, "column": 0}, "map": {"version":3,"sources":["file:///Users/nathan/Desktop/next/showStack/drizzle/db/index.ts"],"sourcesContent":["import \"dotenv/config\"\n\nimport { drizzle } from \"drizzle-orm/node-postgres\"\n\nimport * as schema from \"./schema\"\n\nexport const db = drizzle(process.env.DATABASE_URL!, {\n  schema,\n})\n"],"names":[],"mappings":";;;AAAA;AAEA;AAEA;;;;;;;;AAEO,MAAM,KAAK,CAAA,GAAA,8JAAA,CAAA,UAAO,AAAD,EAAE,QAAQ,GAAG,CAAC,YAAY,EAAG;IACnD,QAAA;AACF","debugId":null}},
    {"offset": {"line": 351, "column": 0}, "map": {"version":3,"sources":["file:///Users/nathan/Desktop/next/showStack/lib/auth.ts"],"sourcesContent":["import { betterAuth } from \"better-auth\";\nimport { drizzleAdapter } from \"better-auth/adapters/drizzle\";\nimport { db } from \"@/drizzle/db\"; // your drizzle instance\n\nexport const auth = betterAuth({\n  emailAndPassword: {\n    enabled: true,\n    autoSignIn: false,\n  },\n  socialProviders: {\n    github: {\n      clientId: process.env.GITHUB_CLIENT_ID as string,\n      clientSecret: process.env.GITHUB_CLIENT_SECRET as string,\n    },\n  },\n  database: drizzleAdapter(db, {\n    provider: \"pg\",\n  }),\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AACA,kNAAmC,wBAAwB;;;;;;;;AAEpD,MAAM,OAAO,CAAA,GAAA,kKAAA,CAAA,aAAU,AAAD,EAAE;IAC7B,kBAAkB;QAChB,SAAS;QACT,YAAY;IACd;IACA,iBAAiB;QACf,QAAQ;YACN,UAAU,QAAQ,GAAG,CAAC,gBAAgB;YACtC,cAAc,QAAQ,GAAG,CAAC,oBAAoB;QAChD;IACF;IACA,UAAU,CAAA,GAAA,oLAAA,CAAA,iBAAc,AAAD,EAAE,wHAAA,CAAA,KAAE,EAAE;QAC3B,UAAU;IACZ;AACF","debugId":null}},
    {"offset": {"line": 395, "column": 0}, "map": {"version":3,"sources":["file:///Users/nathan/Desktop/next/showStack/app/api/user/avatar/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { auth } from \"@/lib/auth\";\nimport { db } from \"@/drizzle/db\";\nimport { user } from \"@/drizzle/db/schema\";\nimport { eq } from \"drizzle-orm\";\nimport path from \"path\";\nimport { writeFile, mkdir, unlink } from \"fs/promises\";\nimport { v4 as uuidv4 } from \"uuid\";\n\n// Définir le chemin de base pour les avatars\nconst AVATARS_BASE_PATH = \"/uploads/avatars\";\nconst AVATARS_DIR = path.join(process.cwd(), \"public\", AVATARS_BASE_PATH);\n\n// S'assurer que le répertoire des avatars existe au démarrage\nmkdir(AVATARS_DIR, { recursive: true }).catch(console.error);\n\nexport async function POST(req: NextRequest) {\n  const session = await auth.api.getSession({ headers: req.headers });\n\n  if (!session?.user?.id) {\n    return NextResponse.json({ error: \"Non autorisé\" }, { status: 401 });\n  }\n\n  const userId = session.user.id;\n\n  try {\n    const formData = await req.formData();\n    const file = formData.get(\"avatar\") as File | null;\n\n    if (!file) {\n      return NextResponse.json(\n        { error: \"Aucun fichier fourni\" },\n        { status: 400 }\n      );\n    }\n\n    // Validation simple du type de fichier (peut être étendue)\n    if (!file.type.startsWith(\"image/\")) {\n      return NextResponse.json(\n        {\n          error: \"Type de fichier non supporté, veuillez téléverser une image.\",\n        },\n        { status: 400 }\n      );\n    }\n\n    // Générer un nom de fichier unique pour éviter les conflits\n    const fileExtension = path.extname(file.name) || \".png\"; // Default to .png if no extension\n    const filename = `${uuidv4()}${fileExtension}`;\n    const userAvatarDir = path.join(AVATARS_DIR, userId);\n    const filePath = path.join(userAvatarDir, filename);\n    const publicFilePath = path.join(AVATARS_BASE_PATH, userId, filename); // Chemin public pour l'URL\n\n    // Créer le répertoire spécifique à l'utilisateur s'il n'existe pas\n    await mkdir(userAvatarDir, { recursive: true });\n\n    // Sauvegarder le fichier\n    const bytes = await file.arrayBuffer();\n    const buffer = Buffer.from(bytes);\n    await writeFile(filePath, buffer);\n\n    // Mettre à jour la base de données avec le nouveau chemin de l'image\n    // Avant de mettre à jour, supprimer l'ancienne image si elle existe\n    const currentUserDetails = await db.query.user.findFirst({\n      where: eq(user.id, userId),\n      columns: { image: true },\n    });\n\n    if (\n      currentUserDetails?.image &&\n      currentUserDetails.image.startsWith(AVATARS_BASE_PATH)\n    ) {\n      const oldFilename = path.basename(currentUserDetails.image);\n      const oldUserAvatarPath = path.join(AVATARS_DIR, userId, oldFilename);\n      try {\n        await unlink(oldUserAvatarPath);\n        console.log(\"Ancienne image supprimée:\", oldUserAvatarPath);\n      } catch (err) {\n        console.error(\n          \"Erreur lors de la suppression de l'ancienne image (non bloquant):\",\n          err\n        );\n        // Ne pas bloquer la mise à jour si la suppression échoue (ex: fichier déjà supprimé)\n      }\n    }\n\n    await db\n      .update(user)\n      .set({ image: publicFilePath })\n      .where(eq(user.id, userId));\n\n    return NextResponse.json({\n      message: \"Avatar téléversé avec succès\",\n      imageUrl: publicFilePath,\n    });\n  } catch (error) {\n    console.error(\"Erreur lors du téléversement de l'avatar:\", error);\n    let errorMessage = \"Erreur serveur interne\";\n    if (error instanceof Error) {\n      errorMessage = error.message;\n    }\n    return NextResponse.json({ error: errorMessage }, { status: 500 });\n  }\n}\n\nexport async function DELETE(req: NextRequest) {\n  const session = await auth.api.getSession({ headers: req.headers });\n\n  if (!session?.user?.id) {\n    return NextResponse.json({ error: \"Non autorisé\" }, { status: 401 });\n  }\n  const userId = session.user.id;\n\n  try {\n    const currentUserDetails = await db.query.user.findFirst({\n      where: eq(user.id, userId),\n      columns: { image: true },\n    });\n\n    if (!currentUserDetails?.image) {\n      return NextResponse.json(\n        { error: \"Aucun avatar à supprimer.\" },\n        { status: 400 }\n      );\n    }\n\n    // Vérifier si l'image est gérée par notre système (commence par AVATARS_BASE_PATH)\n    if (currentUserDetails.image.startsWith(AVATARS_BASE_PATH)) {\n      const filename = path.basename(currentUserDetails.image);\n      const userAvatarPath = path.join(AVATARS_DIR, userId, filename);\n      try {\n        await unlink(userAvatarPath);\n        console.log(\"Image supprimée du système de fichiers:\", userAvatarPath);\n      } catch (err) {\n        console.error(\n          \"Erreur lors de la suppression de l'image du système de fichiers (non bloquant):\",\n          err\n        );\n        // Ne pas bloquer la mise à jour de la DB si la suppression du fichier échoue\n      }\n    }\n    // Dans tous les cas (même si l'image est une URL externe ou si la suppression du fichier échoue),\n    // on met à jour la base de données pour supprimer la référence.\n    await db.update(user).set({ image: null }).where(eq(user.id, userId));\n\n    return NextResponse.json({ message: \"Avatar supprimé avec succès.\" });\n  } catch (error) {\n    console.error(\"Erreur lors de la suppression de l'avatar:\", error);\n    return NextResponse.json(\n      { error: \"Erreur serveur interne\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AAEA,6CAA6C;AAC7C,MAAM,oBAAoB;AAC1B,MAAM,cAAc,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,UAAU;AAEvD,8DAA8D;AAC9D,CAAA,GAAA,qHAAA,CAAA,QAAK,AAAD,EAAE,aAAa;IAAE,WAAW;AAAK,GAAG,KAAK,CAAC,QAAQ,KAAK;AAEpD,eAAe,KAAK,GAAgB;IACzC,MAAM,UAAU,MAAM,6GAAA,CAAA,OAAI,CAAC,GAAG,CAAC,UAAU,CAAC;QAAE,SAAS,IAAI,OAAO;IAAC;IAEjE,IAAI,CAAC,SAAS,MAAM,IAAI;QACtB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAe,GAAG;YAAE,QAAQ;QAAI;IACpE;IAEA,MAAM,SAAS,QAAQ,IAAI,CAAC,EAAE;IAE9B,IAAI;QACF,MAAM,WAAW,MAAM,IAAI,QAAQ;QACnC,MAAM,OAAO,SAAS,GAAG,CAAC;QAE1B,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAuB,GAChC;gBAAE,QAAQ;YAAI;QAElB;QAEA,2DAA2D;QAC3D,IAAI,CAAC,KAAK,IAAI,CAAC,UAAU,CAAC,WAAW;YACnC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBACE,OAAO;YACT,GACA;gBAAE,QAAQ;YAAI;QAElB;QAEA,4DAA4D;QAC5D,MAAM,gBAAgB,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,KAAK,IAAI,KAAK,QAAQ,kCAAkC;QAC3F,MAAM,WAAW,GAAG,CAAA,GAAA,4KAAA,CAAA,KAAM,AAAD,MAAM,eAAe;QAC9C,MAAM,gBAAgB,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,aAAa;QAC7C,MAAM,WAAW,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,eAAe;QAC1C,MAAM,iBAAiB,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,mBAAmB,QAAQ,WAAW,2BAA2B;QAElG,mEAAmE;QACnE,MAAM,CAAA,GAAA,qHAAA,CAAA,QAAK,AAAD,EAAE,eAAe;YAAE,WAAW;QAAK;QAE7C,yBAAyB;QACzB,MAAM,QAAQ,MAAM,KAAK,WAAW;QACpC,MAAM,SAAS,OAAO,IAAI,CAAC;QAC3B,MAAM,CAAA,GAAA,qHAAA,CAAA,YAAS,AAAD,EAAE,UAAU;QAE1B,qEAAqE;QACrE,oEAAoE;QACpE,MAAM,qBAAqB,MAAM,wHAAA,CAAA,KAAE,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC;YACvD,OAAO,CAAA,GAAA,oKAAA,CAAA,KAAE,AAAD,EAAE,yHAAA,CAAA,OAAI,CAAC,EAAE,EAAE;YACnB,SAAS;gBAAE,OAAO;YAAK;QACzB;QAEA,IACE,oBAAoB,SACpB,mBAAmB,KAAK,CAAC,UAAU,CAAC,oBACpC;YACA,MAAM,cAAc,iGAAA,CAAA,UAAI,CAAC,QAAQ,CAAC,mBAAmB,KAAK;YAC1D,MAAM,oBAAoB,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,aAAa,QAAQ;YACzD,IAAI;gBACF,MAAM,CAAA,GAAA,qHAAA,CAAA,SAAM,AAAD,EAAE;gBACb,QAAQ,GAAG,CAAC,6BAA6B;YAC3C,EAAE,OAAO,KAAK;gBACZ,QAAQ,KAAK,CACX,qEACA;YAEF,qFAAqF;YACvF;QACF;QAEA,MAAM,wHAAA,CAAA,KAAE,CACL,MAAM,CAAC,yHAAA,CAAA,OAAI,EACX,GAAG,CAAC;YAAE,OAAO;QAAe,GAC5B,KAAK,CAAC,CAAA,GAAA,oKAAA,CAAA,KAAE,AAAD,EAAE,yHAAA,CAAA,OAAI,CAAC,EAAE,EAAE;QAErB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,UAAU;QACZ;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6CAA6C;QAC3D,IAAI,eAAe;QACnB,IAAI,iBAAiB,OAAO;YAC1B,eAAe,MAAM,OAAO;QAC9B;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAa,GAAG;YAAE,QAAQ;QAAI;IAClE;AACF;AAEO,eAAe,OAAO,GAAgB;IAC3C,MAAM,UAAU,MAAM,6GAAA,CAAA,OAAI,CAAC,GAAG,CAAC,UAAU,CAAC;QAAE,SAAS,IAAI,OAAO;IAAC;IAEjE,IAAI,CAAC,SAAS,MAAM,IAAI;QACtB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAe,GAAG;YAAE,QAAQ;QAAI;IACpE;IACA,MAAM,SAAS,QAAQ,IAAI,CAAC,EAAE;IAE9B,IAAI;QACF,MAAM,qBAAqB,MAAM,wHAAA,CAAA,KAAE,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC;YACvD,OAAO,CAAA,GAAA,oKAAA,CAAA,KAAE,AAAD,EAAE,yHAAA,CAAA,OAAI,CAAC,EAAE,EAAE;YACnB,SAAS;gBAAE,OAAO;YAAK;QACzB;QAEA,IAAI,CAAC,oBAAoB,OAAO;YAC9B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA4B,GACrC;gBAAE,QAAQ;YAAI;QAElB;QAEA,mFAAmF;QACnF,IAAI,mBAAmB,KAAK,CAAC,UAAU,CAAC,oBAAoB;YAC1D,MAAM,WAAW,iGAAA,CAAA,UAAI,CAAC,QAAQ,CAAC,mBAAmB,KAAK;YACvD,MAAM,iBAAiB,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,aAAa,QAAQ;YACtD,IAAI;gBACF,MAAM,CAAA,GAAA,qHAAA,CAAA,SAAM,AAAD,EAAE;gBACb,QAAQ,GAAG,CAAC,2CAA2C;YACzD,EAAE,OAAO,KAAK;gBACZ,QAAQ,KAAK,CACX,mFACA;YAEF,6EAA6E;YAC/E;QACF;QACA,kGAAkG;QAClG,gEAAgE;QAChE,MAAM,wHAAA,CAAA,KAAE,CAAC,MAAM,CAAC,yHAAA,CAAA,OAAI,EAAE,GAAG,CAAC;YAAE,OAAO;QAAK,GAAG,KAAK,CAAC,CAAA,GAAA,oKAAA,CAAA,KAAE,AAAD,EAAE,yHAAA,CAAA,OAAI,CAAC,EAAE,EAAE;QAE7D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAA+B;IACrE,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8CAA8C;QAC5D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAyB,GAClC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}