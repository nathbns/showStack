{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 150, "column": 0}, "map": {"version":3,"sources":["file:///Users/nathan/Desktop/showStack/drizzle/db/schema.ts"],"sourcesContent":["import {\n  pgTable,\n  text,\n  timestamp,\n  boolean,\n  integer,\n  serial,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { eq } from \"drizzle-orm\";\n\nexport const user = pgTable(\"user\", {\n  id: text(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  emailVerified: boolean(\"email_verified\").notNull(),\n  image: text(\"image\"),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").notNull(),\n  updatedAt: timestamp(\"updated_at\").notNull(),\n  layoutConfig: text(\"layout_config\"),\n  shareCount: integer(\"share_count\").default(0).notNull(),\n});\n\nexport const session = pgTable(\"session\", {\n  id: text(\"id\").primaryKey(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  token: text(\"token\").notNull().unique(),\n  createdAt: timestamp(\"created_at\").notNull(),\n  updatedAt: timestamp(\"updated_at\").notNull(),\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  userId: text(\"user_id\")\n    .notNull()\n    .references(() => user.id, { onDelete: \"cascade\" }),\n});\n\nexport const sessionRelations = relations(session, ({ one }) => ({\n  user: one(user, {\n    fields: [session.userId],\n    references: [user.id],\n  }),\n}));\n\nexport const account = pgTable(\"account\", {\n  id: text(\"id\").primaryKey(),\n  accountId: text(\"account_id\").notNull(),\n  providerId: text(\"provider_id\").notNull(),\n  userId: text(\"user_id\")\n    .notNull()\n    .references(() => user.id, { onDelete: \"cascade\" }),\n  accessToken: text(\"access_token\"),\n  refreshToken: text(\"refresh_token\"),\n  idToken: text(\"id_token\"),\n  accessTokenExpiresAt: timestamp(\"access_token_expires_at\"),\n  refreshTokenExpiresAt: timestamp(\"refresh_token_expires_at\"),\n  scope: text(\"scope\"),\n  password: text(\"password\"),\n  createdAt: timestamp(\"created_at\").notNull(),\n  updatedAt: timestamp(\"updated_at\").notNull(),\n});\n\nexport const accountRelations = relations(account, ({ one }) => ({\n  user: one(user, {\n    fields: [account.userId],\n    references: [user.id],\n  }),\n}));\n\nexport const verification = pgTable(\"verification\", {\n  id: text(\"id\").primaryKey(),\n  identifier: text(\"identifier\").notNull(),\n  value: text(\"value\").notNull(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\"),\n  updatedAt: timestamp(\"updated_at\"),\n});\n\nexport const userStackTechnologies = pgTable(\"user_stack_technology\", {\n  id: text(\"id\").primaryKey(),\n  userId: text(\"user_id\")\n    .notNull()\n    .references(() => user.id, { onDelete: \"cascade\" }),\n  name: text(\"name\").notNull(),\n  version: text(\"version\"),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const userStackTechnologiesRelations = relations(\n  userStackTechnologies,\n  ({ one }) => ({\n    user: one(user, {\n      fields: [userStackTechnologies.userId],\n      references: [user.id],\n    }),\n  })\n);\n\nexport const techStack = pgTable(\"tech_stack\", {\n  id: serial(\"id\").primaryKey(),\n  userId: text(\"user_id\")\n    .notNull()\n    .unique() // Un seul techStack par utilisateur\n    .references(() => user.id, { onDelete: \"cascade\" }),\n  upvotes: integer(\"upvotes\").default(0).notNull(),\n  showStripeCard: boolean(\"show_stripe_card\").default(false).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n  stripeCardColSpan: integer(\"stripe_card_col_span\").default(1).notNull(),\n  stripeCardRowSpan: integer(\"stripe_card_row_span\").default(1).notNull(),\n  stripeCardOrder: integer(\"stripe_card_order\").default(0).notNull(),\n});\n\nexport const stackTechnologyItem = pgTable(\"stack_technology_item\", {\n  id: serial(\"id\").primaryKey(),\n  techStackId: integer(\"tech_stack_id\")\n    .notNull()\n    .references(() => techStack.id, { onDelete: \"cascade\" }),\n  technologyId: text(\"technology_id\").notNull(), // ex: \"typescript\", \"react\", or custom ID\n  name: text(\"name\").notNull(),\n  color: text(\"color\").notNull(),\n  category: text(\"category\").notNull(), // ex: \"Frontend\", \"Backend\", \"Custom\"\n  gridCols: integer(\"grid_cols\").default(1),\n  gridRows: integer(\"grid_rows\").default(1),\n  isProject: boolean(\"is_project\").default(false),\n  favicon: text(\"favicon\"),\n  url: text(\"url\"),\n  description: text(\"description\"),\n  order: integer(\"order\").default(0),\n  stars: integer(\"stars\").default(0),\n  forks: integer(\"forks\").default(0),\n  mrr: integer(\"mrr\"), // Revenu Mensuel Récurrent en centimes\n  mrrCurrency: text(\"mrr_currency\"), // Ex: \"USD\", \"EUR\"\n});\n\nexport const techStackRelations = relations(techStack, ({ one, many }) => ({\n  user: one(user, {\n    fields: [techStack.userId],\n    references: [user.id],\n  }),\n  technologies: many(stackTechnologyItem),\n}));\n\nexport const stackTechnologyItemRelations = relations(\n  stackTechnologyItem,\n  ({ one }) => ({\n    techStack: one(techStack, {\n      fields: [stackTechnologyItem.techStackId],\n      references: [techStack.id],\n    }),\n  })\n);\n\n// Table pour les connexions Stripe\nexport const stripeConnection = pgTable(\"stripe_connection\", {\n  id: serial(\"id\").primaryKey(),\n  userId: text(\"user_id\")\n    .notNull()\n    .references(() => user.id, { onDelete: \"cascade\" })\n    .unique(), // Un utilisateur = une connexion Stripe\n  stripeUserId: text(\"stripe_user_id\").notNull(), // ID du compte Stripe connecté (acct_...)\n  accessToken: text(\"access_token\").notNull(), // DOIT être chiffré en BDD\n  refreshToken: text(\"refresh_token\"), // DOIT être chiffré en BDD\n  scope: text(\"scope\"), // Permissions accordées\n  livemode: boolean(\"livemode\").notNull(),\n  stripePublishableKey: text(\"stripe_publishable_key\"),\n  accessTokenExpiresAt: timestamp(\"access_token_expires_at\"), // Si applicable\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const stripeConnectionRelations = relations(\n  stripeConnection,\n  ({ one }) => ({\n    user: one(user, {\n      fields: [stripeConnection.userId],\n      references: [user.id],\n    }),\n  })\n);\n\n// Mettre à jour les relations utilisateur\nexport const userRelations = relations(user, ({ many, one }) => ({\n  sessions: many(session),\n  accounts: many(account),\n  stackTechnologies: many(userStackTechnologies), // Conserver si c'est une table différente/héritée\n  techStack: one(techStack), // Un seul techStack par utilisateur\n  stripeConnection: one(stripeConnection), // Ajout de la relation à la connexion Stripe\n}));\n\n/*\n// Requête préparée pour récupérer les technologies d'une stack avec toutes les colonnes\nexport const getTechStackWithTechnologies = (db) => async (stackId) => {\n  const result = await db.query.techStack.findFirst({\n    where: eq(techStack.id, stackId),\n    with: {\n      technologies: true\n    },\n  });\n  return result;\n};\n*/\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 371, "column": 0}, "map": {"version":3,"sources":["file:///Users/nathan/Desktop/showStack/drizzle/db/index.ts"],"sourcesContent":["import \"dotenv/config\";\n\nimport { drizzle } from \"drizzle-orm/node-postgres\";\nimport { Pool } from \"pg\";\n\nimport * as schema from \"./schema\";\n\n// Vérifier si DATABASE_URL est définie\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL environment variable is not set or accessible.\"\n  );\n}\n\n// Créer un Pool de connexions\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL, // DATABASE_URL doit contenir ?sslmode=require\n});\n\n// Initialiser Drizzle avec le pool et le schéma\nexport const db = drizzle(pool, { schema });\n"],"names":[],"mappings":";;;AAAA;AAEA;AACA;AAEA;;;;;;;;;;AAEA,uCAAuC;AACvC,IAAI,CAAC,QAAQ,GAAG,CAAC,YAAY,EAAE;IAC7B,MAAM,IAAI,MACR;AAEJ;AAEA,8BAA8B;AAC9B,MAAM,OAAO,IAAI,oGAAA,CAAA,OAAI,CAAC;IACpB,kBAAkB,QAAQ,GAAG,CAAC,YAAY;AAC5C;AAGO,MAAM,KAAK,CAAA,GAAA,8JAAA,CAAA,UAAO,AAAD,EAAE,MAAM;IAAE,QAAA;AAAO","debugId":null}},
    {"offset": {"line": 405, "column": 0}, "map": {"version":3,"sources":["file:///Users/nathan/Desktop/showStack/lib/auth.ts"],"sourcesContent":["import { betterAuth } from \"better-auth\";\nimport { drizzleAdapter } from \"better-auth/adapters/drizzle\";\nimport { db } from \"@/drizzle/db\"; // your drizzle instance\n// Importer user seulement si vous avez besoin de typer explicitement le retour de mapProfileToUser\n// import { user } from \"@/drizzle/db/schema\";\n\nexport const auth = betterAuth({\n  emailAndPassword: {\n    enabled: false,\n    autoSignIn: false,\n  },\n  socialProviders: {\n    github: {\n      clientId: process.env.GITHUB_CLIENT_ID as string,\n      clientSecret: process.env.GITHUB_CLIENT_SECRET as string,\n      overrideUserInfoOnSignIn: true,\n      scope: [\"user:email\", \"read:user\"],\n      mapProfileToUser: (profile: any) => {\n        console.log(\"GitHub Profile Bio:\", profile.bio);\n\n        if (profile.bio) {\n          setTimeout(async () => {\n            try {\n              await db.execute(`\n                UPDATE \"user\" \n                SET description = '${profile.bio.replace(/'/g, \"''\")}'\n                WHERE email = '${profile.email}'\n              `);\n              console.log(\"✅ Description mise à jour manuellement en DB\");\n            } catch (e) {\n              console.error(\"❌ Erreur lors de la mise à jour manuelle:\", e);\n            }\n          }, 1000);\n        }\n\n        return {\n          description: profile.bio,\n        };\n      },\n    },\n  },\n  database: drizzleAdapter(db, {\n    provider: \"pg\",\n  }),\n  callbacks: {\n    session: ({ session, user }: { session: any; user: any }) => {\n      console.log(\"SESSION CALLBACK - USER:\", JSON.stringify(user, null, 2));\n      console.log(\n        \"SESSION CALLBACK - ORIGINAL SESSION:\",\n        JSON.stringify(session, null, 2)\n      );\n\n      if (user && user.description) {\n        session.user.description = user.description;\n        console.log(\"✅ Description ajoutée à la session:\", user.description);\n      } else {\n        console.log(\"❌ Pas de description dans l'objet user\");\n      }\n\n      console.log(\n        \"SESSION CALLBACK - SESSION FINALE:\",\n        JSON.stringify(session, null, 2)\n      );\n      return session;\n    },\n  },\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AACA,kNAAmC,wBAAwB;;;;;;;;AAIpD,MAAM,OAAO,CAAA,GAAA,kKAAA,CAAA,aAAU,AAAD,EAAE;IAC7B,kBAAkB;QAChB,SAAS;QACT,YAAY;IACd;IACA,iBAAiB;QACf,QAAQ;YACN,UAAU,QAAQ,GAAG,CAAC,gBAAgB;YACtC,cAAc,QAAQ,GAAG,CAAC,oBAAoB;YAC9C,0BAA0B;YAC1B,OAAO;gBAAC;gBAAc;aAAY;YAClC,kBAAkB,CAAC;gBACjB,QAAQ,GAAG,CAAC,uBAAuB,QAAQ,GAAG;gBAE9C,IAAI,QAAQ,GAAG,EAAE;oBACf,WAAW;wBACT,IAAI;4BACF,MAAM,wHAAA,CAAA,KAAE,CAAC,OAAO,CAAC,CAAC;;mCAEG,EAAE,QAAQ,GAAG,CAAC,OAAO,CAAC,MAAM,MAAM;+BACtC,EAAE,QAAQ,KAAK,CAAC;cACjC,CAAC;4BACD,QAAQ,GAAG,CAAC;wBACd,EAAE,OAAO,GAAG;4BACV,QAAQ,KAAK,CAAC,6CAA6C;wBAC7D;oBACF,GAAG;gBACL;gBAEA,OAAO;oBACL,aAAa,QAAQ,GAAG;gBAC1B;YACF;QACF;IACF;IACA,UAAU,CAAA,GAAA,oLAAA,CAAA,iBAAc,AAAD,EAAE,wHAAA,CAAA,KAAE,EAAE;QAC3B,UAAU;IACZ;IACA,WAAW;QACT,SAAS,CAAC,EAAE,OAAO,EAAE,IAAI,EAA+B;YACtD,QAAQ,GAAG,CAAC,4BAA4B,KAAK,SAAS,CAAC,MAAM,MAAM;YACnE,QAAQ,GAAG,CACT,wCACA,KAAK,SAAS,CAAC,SAAS,MAAM;YAGhC,IAAI,QAAQ,KAAK,WAAW,EAAE;gBAC5B,QAAQ,IAAI,CAAC,WAAW,GAAG,KAAK,WAAW;gBAC3C,QAAQ,GAAG,CAAC,uCAAuC,KAAK,WAAW;YACrE,OAAO;gBACL,QAAQ,GAAG,CAAC;YACd;YAEA,QAAQ,GAAG,CACT,sCACA,KAAK,SAAS,CAAC,SAAS,MAAM;YAEhC,OAAO;QACT;IACF;AACF","debugId":null}},
    {"offset": {"line": 520, "column": 0}, "map": {"version":3,"sources":["file:///Users/nathan/Desktop/showStack/lib/stripe-mrr.ts"],"sourcesContent":["import { db } from \"@/drizzle/db\";\nimport { stripeConnection } from \"@/drizzle/db/schema\";\nimport { eq } from \"drizzle-orm\";\nimport Stripe from \"stripe\";\n\n// Fonction pour calculer le MRR à partir des abonnements Stripe\n// (Cette fonction est identique à celle déjà utilisée)\nfunction calculateMrrFromSubscriptions(subscriptions: Stripe.Subscription[]): {\n  total: number;\n  currency: string;\n} {\n  let totalMrr = 0;\n  let currency: string | null = null;\n  subscriptions.forEach((sub) => {\n    if (sub.status === \"active\" || sub.status === \"trialing\") {\n      sub.items.data.forEach((item: Stripe.SubscriptionItem) => {\n        if (item.price && item.price.unit_amount && item.price.recurring) {\n          if (item.price.recurring.interval === \"month\") {\n            totalMrr += item.price.unit_amount * (item.quantity || 1);\n          } else if (item.price.recurring.interval === \"year\") {\n            totalMrr += (item.price.unit_amount / 12) * (item.quantity || 1);\n          }\n          if (!currency && item.price.currency) {\n            currency = item.price.currency;\n          }\n        }\n      });\n    }\n  });\n  const finalCurrency = currency || \"USD\"; // Monnaie par défaut si aucune n'est trouvée\n  return { total: Math.round(totalMrr), currency: finalCurrency.toUpperCase() };\n}\n\n// Fonction exportée pour récupérer le MRR pour un utilisateur spécifique\nexport async function fetchMrrForUser(\n  userId: string\n): Promise<{ total: number; currency: string } | null> {\n  try {\n    // 1. Récupérer la connexion Stripe de l'utilisateur depuis la table stripeConnection\n    const userStripeConn = await db.query.stripeConnection.findFirst({\n      where: eq(stripeConnection.userId, userId),\n      columns: {\n        // accessToken: true, // L'accessToken du compte connecté n'est pas utilisé pour lister les abos de cette manière\n        stripeUserId: true, // C'est l'ID du compte Stripe connecté (acct_...)\n      },\n    });\n\n    if (!userStripeConn || !userStripeConn.stripeUserId) {\n      console.warn(\n        `[fetchMrrForUser] Connexion Stripe (stripeUserId) non trouvée pour l'utilisateur ${userId}. Impossible de calculer le MRR.`\n      );\n      return { total: 0, currency: \"USD\" }; // Retourner 0 si pas de connexion\n    }\n\n    // 2. Utiliser la clé secrète de la plateforme Stripe\n    const platformStripeSecretKey = process.env.STRIPE_SECRET_KEY;\n    if (!platformStripeSecretKey) {\n      console.error(\n        \"[fetchMrrForUser] La variable d'environnement STRIPE_SECRET_KEY n'est pas configurée.\"\n      );\n      throw new Error(\"Configuration Stripe incomplète côté serveur.\");\n    }\n\n    const stripe = new Stripe(platformStripeSecretKey, { typescript: true });\n\n    // 3. Récupérer les abonnements Stripe pour le compte connecté spécifié\n    const subscriptions = await stripe.subscriptions.list(\n      { limit: 100, status: \"all\" }, // 'status: \"all\"' car calculateMrrFromSubscriptions filtre déjà par 'active' ou 'trialing'\n      { stripeAccount: userStripeConn.stripeUserId } // Crucial: effectuer la requête AU NOM du compte connecté\n    );\n\n    // 4. Calculer le MRR\n    return calculateMrrFromSubscriptions(subscriptions.data);\n  } catch (error) {\n    console.error(\n      `[fetchMrrForUser] Erreur lors de la récupération du MRR pour l'utilisateur ${userId}:`,\n      error\n    );\n    // En cas d'erreur pendant l'appel à Stripe ou autre, retourner 0 pour éviter de casser le reste.\n    return { total: 0, currency: \"USD\" };\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;;;;;AAEA,gEAAgE;AAChE,uDAAuD;AACvD,SAAS,8BAA8B,aAAoC;IAIzE,IAAI,WAAW;IACf,IAAI,WAA0B;IAC9B,cAAc,OAAO,CAAC,CAAC;QACrB,IAAI,IAAI,MAAM,KAAK,YAAY,IAAI,MAAM,KAAK,YAAY;YACxD,IAAI,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBACtB,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,CAAC,WAAW,IAAI,KAAK,KAAK,CAAC,SAAS,EAAE;oBAChE,IAAI,KAAK,KAAK,CAAC,SAAS,CAAC,QAAQ,KAAK,SAAS;wBAC7C,YAAY,KAAK,KAAK,CAAC,WAAW,GAAG,CAAC,KAAK,QAAQ,IAAI,CAAC;oBAC1D,OAAO,IAAI,KAAK,KAAK,CAAC,SAAS,CAAC,QAAQ,KAAK,QAAQ;wBACnD,YAAY,AAAC,KAAK,KAAK,CAAC,WAAW,GAAG,KAAM,CAAC,KAAK,QAAQ,IAAI,CAAC;oBACjE;oBACA,IAAI,CAAC,YAAY,KAAK,KAAK,CAAC,QAAQ,EAAE;wBACpC,WAAW,KAAK,KAAK,CAAC,QAAQ;oBAChC;gBACF;YACF;QACF;IACF;IACA,MAAM,gBAAgB,YAAY,OAAO,6CAA6C;IACtF,OAAO;QAAE,OAAO,KAAK,KAAK,CAAC;QAAW,UAAU,cAAc,WAAW;IAAG;AAC9E;AAGO,eAAe,gBACpB,MAAc;IAEd,IAAI;QACF,qFAAqF;QACrF,MAAM,iBAAiB,MAAM,wHAAA,CAAA,KAAE,CAAC,KAAK,CAAC,gBAAgB,CAAC,SAAS,CAAC;YAC/D,OAAO,CAAA,GAAA,oKAAA,CAAA,KAAE,AAAD,EAAE,yHAAA,CAAA,mBAAgB,CAAC,MAAM,EAAE;YACnC,SAAS;gBACP,iHAAiH;gBACjH,cAAc;YAChB;QACF;QAEA,IAAI,CAAC,kBAAkB,CAAC,eAAe,YAAY,EAAE;YACnD,QAAQ,IAAI,CACV,CAAC,iFAAiF,EAAE,OAAO,gCAAgC,CAAC;YAE9H,OAAO;gBAAE,OAAO;gBAAG,UAAU;YAAM,GAAG,kCAAkC;QAC1E;QAEA,qDAAqD;QACrD,MAAM,0BAA0B,QAAQ,GAAG,CAAC,iBAAiB;QAC7D,IAAI,CAAC,yBAAyB;YAC5B,QAAQ,KAAK,CACX;YAEF,MAAM,IAAI,MAAM;QAClB;QAEA,MAAM,SAAS,IAAI,wJAAA,CAAA,UAAM,CAAC,yBAAyB;YAAE,YAAY;QAAK;QAEtE,uEAAuE;QACvE,MAAM,gBAAgB,MAAM,OAAO,aAAa,CAAC,IAAI,CACnD;YAAE,OAAO;YAAK,QAAQ;QAAM,GAC5B;YAAE,eAAe,eAAe,YAAY;QAAC,EAAE,0DAA0D;;QAG3G,qBAAqB;QACrB,OAAO,8BAA8B,cAAc,IAAI;IACzD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CACX,CAAC,2EAA2E,EAAE,OAAO,CAAC,CAAC,EACvF;QAEF,iGAAiG;QACjG,OAAO;YAAE,OAAO;YAAG,UAAU;QAAM;IACrC;AACF","debugId":null}},
    {"offset": {"line": 614, "column": 0}, "map": {"version":3,"sources":["file:///Users/nathan/Desktop/showStack/app/api/stripe/mrr/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport { auth } from \"@/lib/auth\";\nimport { fetchMrrForUser } from \"@/lib/stripe-mrr\"; // Importer le helper\n\nexport async function GET(request: Request) {\n  try {\n    const session = await auth.api.getSession({ headers: request.headers });\n    if (!session?.user?.id) {\n      return NextResponse.json({ error: \"Non autorisé\" }, { status: 401 });\n    }\n    const userId = session.user.id;\n\n    const mrrData = await fetchMrrForUser(userId);\n\n    if (mrrData === null || mrrData.total === undefined) {\n      // Vérifier si mrrData est null ou invalide\n      // fetchMrrForUser gère déjà les erreurs et retourne { total: 0, currency: \"USD\" } en cas de problème\n      // donc ce cas ne devrait pas arriver si fetchMrrForUser est bien implémenté pour toujours retourner un objet.\n      // Cependant, par sécurité, si fetchMrrForUser retournait null explicitement dans un futur changement:\n      return NextResponse.json(\n        { error: \"Impossible de récupérer les données MRR via le helper.\" },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json({\n      message: \"MRR total du compte récupéré avec succès.\",\n      total: mrrData.total,\n      currency: mrrData.currency,\n    });\n  } catch (error) {\n    // Ce bloc catch devient moins probable si fetchMrrForUser gère ses propres erreurs,\n    // mais gardé pour des erreurs inattendues au niveau de cette route (ex: session).\n    console.error(\"[API /api/stripe/mrr] Erreur inattendue:\", error);\n    const errorMessage =\n      error instanceof Error\n        ? error.message\n        : \"Une erreur interne est survenue.\";\n    return NextResponse.json({ error: errorMessage }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA,8MAAoD,qBAAqB;;;;;;;;;AAElE,eAAe,IAAI,OAAgB;IACxC,IAAI;QACF,MAAM,UAAU,MAAM,6GAAA,CAAA,OAAI,CAAC,GAAG,CAAC,UAAU,CAAC;YAAE,SAAS,QAAQ,OAAO;QAAC;QACrE,IAAI,CAAC,SAAS,MAAM,IAAI;YACtB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAe,GAAG;gBAAE,QAAQ;YAAI;QACpE;QACA,MAAM,SAAS,QAAQ,IAAI,CAAC,EAAE;QAE9B,MAAM,UAAU,MAAM,CAAA,GAAA,sHAAA,CAAA,kBAAe,AAAD,EAAE;QAEtC,IAAI,YAAY,QAAQ,QAAQ,KAAK,KAAK,WAAW;YACnD,2CAA2C;YAC3C,qGAAqG;YACrG,8GAA8G;YAC9G,sGAAsG;YACtG,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAyD,GAClE;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,OAAO,QAAQ,KAAK;YACpB,UAAU,QAAQ,QAAQ;QAC5B;IACF,EAAE,OAAO,OAAO;QACd,oFAAoF;QACpF,kFAAkF;QAClF,QAAQ,KAAK,CAAC,4CAA4C;QAC1D,MAAM,eACJ,iBAAiB,QACb,MAAM,OAAO,GACb;QACN,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAa,GAAG;YAAE,QAAQ;QAAI;IAClE;AACF","debugId":null}}]
}