{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 150, "column": 0}, "map": {"version":3,"sources":["file:///Users/nathan/Desktop/showStack/drizzle/db/schema.ts"],"sourcesContent":["import {\n  pgTable,\n  text,\n  timestamp,\n  boolean,\n  integer,\n  serial,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { eq } from \"drizzle-orm\";\n\nexport const user = pgTable(\"user\", {\n  id: text(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  emailVerified: boolean(\"email_verified\").notNull(),\n  image: text(\"image\"),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").notNull(),\n  updatedAt: timestamp(\"updated_at\").notNull(),\n});\n\n// Nouvelle table pour les tags utilisateur\nexport const userTag = pgTable(\"user_tag\", {\n  id: serial(\"id\").primaryKey(),\n  userId: text(\"user_id\")\n    .notNull()\n    .references(() => user.id, { onDelete: \"cascade\" }),\n  name: text(\"name\").notNull(),\n  color: text(\"color\").notNull().default(\"#3B82F6\"), // Couleur par défaut (bleu)\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const session = pgTable(\"session\", {\n  id: text(\"id\").primaryKey(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  token: text(\"token\").notNull().unique(),\n  createdAt: timestamp(\"created_at\").notNull(),\n  updatedAt: timestamp(\"updated_at\").notNull(),\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  userId: text(\"user_id\")\n    .notNull()\n    .references(() => user.id, { onDelete: \"cascade\" }),\n});\n\nexport const sessionRelations = relations(session, ({ one }) => ({\n  user: one(user, {\n    fields: [session.userId],\n    references: [user.id],\n  }),\n}));\n\nexport const account = pgTable(\"account\", {\n  id: text(\"id\").primaryKey(),\n  accountId: text(\"account_id\").notNull(),\n  providerId: text(\"provider_id\").notNull(),\n  userId: text(\"user_id\")\n    .notNull()\n    .references(() => user.id, { onDelete: \"cascade\" }),\n  accessToken: text(\"access_token\"),\n  refreshToken: text(\"refresh_token\"),\n  idToken: text(\"id_token\"),\n  accessTokenExpiresAt: timestamp(\"access_token_expires_at\"),\n  refreshTokenExpiresAt: timestamp(\"refresh_token_expires_at\"),\n  scope: text(\"scope\"),\n  password: text(\"password\"),\n  createdAt: timestamp(\"created_at\").notNull(),\n  updatedAt: timestamp(\"updated_at\").notNull(),\n});\n\nexport const accountRelations = relations(account, ({ one }) => ({\n  user: one(user, {\n    fields: [account.userId],\n    references: [user.id],\n  }),\n}));\n\nexport const verification = pgTable(\"verification\", {\n  id: text(\"id\").primaryKey(),\n  identifier: text(\"identifier\").notNull(),\n  value: text(\"value\").notNull(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\"),\n  updatedAt: timestamp(\"updated_at\"),\n});\n\nexport const userStackTechnologies = pgTable(\"user_stack_technology\", {\n  id: text(\"id\").primaryKey(),\n  userId: text(\"user_id\")\n    .notNull()\n    .references(() => user.id, { onDelete: \"cascade\" }),\n  name: text(\"name\").notNull(),\n  version: text(\"version\"),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const userRelations = relations(user, ({ many }) => ({\n  sessions: many(session),\n  accounts: many(account),\n  stackTechnologies: many(userStackTechnologies),\n  techStacks: many(techStack),\n  tags: many(userTag), // Nouvelle relation\n}));\n\nexport const userStackTechnologiesRelations = relations(\n  userStackTechnologies,\n  ({ one }) => ({\n    user: one(user, {\n      fields: [userStackTechnologies.userId],\n      references: [user.id],\n    }),\n  })\n);\n\nexport const techStack = pgTable(\"tech_stack\", {\n  id: serial(\"id\").primaryKey(),\n  userId: text(\"user_id\")\n    .notNull()\n    .references(() => user.id, { onDelete: \"cascade\" }),\n  name: text(\"name\"),\n  upvotes: integer(\"upvotes\").default(0).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const stackTechnologyItem = pgTable(\"stack_technology_item\", {\n  id: serial(\"id\").primaryKey(),\n  techStackId: integer(\"tech_stack_id\")\n    .notNull()\n    .references(() => techStack.id, { onDelete: \"cascade\" }),\n  technologyId: text(\"technology_id\").notNull(), // ex: \"typescript\", \"react\", or custom ID\n  name: text(\"name\").notNull(),\n  color: text(\"color\").notNull(),\n  category: text(\"category\").notNull(), // ex: \"Frontend\", \"Backend\", \"Custom\"\n  gridCols: integer(\"grid_cols\").default(1),\n  gridRows: integer(\"grid_rows\").default(1),\n  isProject: boolean(\"is_project\").default(false),\n  favicon: text(\"favicon\"),\n  url: text(\"url\"),\n  description: text(\"description\"),\n  order: integer(\"order\").default(0),\n});\n\nexport const techStackRelations = relations(techStack, ({ one, many }) => ({\n  user: one(user, {\n    fields: [techStack.userId],\n    references: [user.id],\n  }),\n  technologies: many(stackTechnologyItem),\n}));\n\nexport const stackTechnologyItemRelations = relations(\n  stackTechnologyItem,\n  ({ one }) => ({\n    techStack: one(techStack, {\n      fields: [stackTechnologyItem.techStackId],\n      references: [techStack.id],\n    }),\n  })\n);\n\nexport const userTagRelations = relations(userTag, ({ one }) => ({\n  user: one(user, {\n    fields: [userTag.userId],\n    references: [user.id],\n  }),\n}));\n\n/*\n// Requête préparée pour récupérer les technologies d'une stack avec toutes les colonnes\nexport const getTechStackWithTechnologies = (db) => async (stackId) => {\n  const result = await db.query.techStack.findFirst({\n    where: eq(techStack.id, stackId),\n    with: {\n      technologies: true\n    },\n  });\n  return result;\n};\n*/\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 355, "column": 0}, "map": {"version":3,"sources":["file:///Users/nathan/Desktop/showStack/drizzle/db/index.ts"],"sourcesContent":["import \"dotenv/config\"\n\nimport { drizzle } from \"drizzle-orm/node-postgres\"\n\nimport * as schema from \"./schema\"\n\nexport const db = drizzle(process.env.DATABASE_URL!, {\n  schema,\n})\n"],"names":[],"mappings":";;;AAAA;AAEA;AAEA;;;;;;;;AAEO,MAAM,KAAK,CAAA,GAAA,8JAAA,CAAA,UAAO,AAAD,EAAE,QAAQ,GAAG,CAAC,YAAY,EAAG;IACnD,QAAA;AACF","debugId":null}},
    {"offset": {"line": 378, "column": 0}, "map": {"version":3,"sources":["file:///Users/nathan/Desktop/showStack/lib/auth.ts"],"sourcesContent":["import { betterAuth } from \"better-auth\";\nimport { drizzleAdapter } from \"better-auth/adapters/drizzle\";\nimport { db } from \"@/drizzle/db\"; // your drizzle instance\n// Importer user seulement si vous avez besoin de typer explicitement le retour de mapProfileToUser\n// import { user } from \"@/drizzle/db/schema\";\n\nexport const auth = betterAuth({\n  emailAndPassword: {\n    enabled: false,\n    autoSignIn: false,\n  },\n  socialProviders: {\n    github: {\n      clientId: process.env.GITHUB_CLIENT_ID as string,\n      clientSecret: process.env.GITHUB_CLIENT_SECRET as string,\n      overrideUserInfoOnSignIn: true,\n      scope: [\"user:email\", \"read:user\"],\n      mapProfileToUser: (profile: any) => {\n        console.log(\"GitHub Profile Bio:\", profile.bio);\n\n        if (profile.bio) {\n          setTimeout(async () => {\n            try {\n              await db.execute(`\n                UPDATE \"user\" \n                SET description = '${profile.bio.replace(/'/g, \"''\")}'\n                WHERE email = '${profile.email}'\n              `);\n              console.log(\"✅ Description mise à jour manuellement en DB\");\n            } catch (e) {\n              console.error(\"❌ Erreur lors de la mise à jour manuelle:\", e);\n            }\n          }, 1000);\n        }\n\n        return {\n          description: profile.bio,\n        };\n      },\n    },\n    twitter: {\n      clientId: process.env.TWITTER_CLIENT_ID as string,\n      clientSecret: process.env.TWITTER_CLIENT_SECRET as string,\n      overrideUserInfoOnSignIn: true,\n      mapProfileToUser: (profile: any) => {\n        console.log(\"Twitter Profile Data:\", JSON.stringify(profile, null, 2));\n\n        const customData: { description?: string } = {};\n\n        if (profile.description) {\n          customData.description = profile.description;\n        } else if (profile.data && profile.data.description) {\n          customData.description = profile.data.description;\n        }\n\n        return customData;\n      },\n    },\n  },\n  database: drizzleAdapter(db, {\n    provider: \"pg\",\n  }),\n  callbacks: {\n    session: ({ session, user }: { session: any; user: any }) => {\n      console.log(\"SESSION CALLBACK - USER:\", JSON.stringify(user, null, 2));\n      console.log(\n        \"SESSION CALLBACK - ORIGINAL SESSION:\",\n        JSON.stringify(session, null, 2)\n      );\n\n      if (user && user.description) {\n        session.user.description = user.description;\n        console.log(\"✅ Description ajoutée à la session:\", user.description);\n      } else {\n        console.log(\"❌ Pas de description dans l'objet user\");\n      }\n\n      console.log(\n        \"SESSION CALLBACK - SESSION FINALE:\",\n        JSON.stringify(session, null, 2)\n      );\n      return session;\n    },\n  },\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AACA,kNAAmC,wBAAwB;;;;;;;;AAIpD,MAAM,OAAO,CAAA,GAAA,kKAAA,CAAA,aAAU,AAAD,EAAE;IAC7B,kBAAkB;QAChB,SAAS;QACT,YAAY;IACd;IACA,iBAAiB;QACf,QAAQ;YACN,UAAU,QAAQ,GAAG,CAAC,gBAAgB;YACtC,cAAc,QAAQ,GAAG,CAAC,oBAAoB;YAC9C,0BAA0B;YAC1B,OAAO;gBAAC;gBAAc;aAAY;YAClC,kBAAkB,CAAC;gBACjB,QAAQ,GAAG,CAAC,uBAAuB,QAAQ,GAAG;gBAE9C,IAAI,QAAQ,GAAG,EAAE;oBACf,WAAW;wBACT,IAAI;4BACF,MAAM,wHAAA,CAAA,KAAE,CAAC,OAAO,CAAC,CAAC;;mCAEG,EAAE,QAAQ,GAAG,CAAC,OAAO,CAAC,MAAM,MAAM;+BACtC,EAAE,QAAQ,KAAK,CAAC;cACjC,CAAC;4BACD,QAAQ,GAAG,CAAC;wBACd,EAAE,OAAO,GAAG;4BACV,QAAQ,KAAK,CAAC,6CAA6C;wBAC7D;oBACF,GAAG;gBACL;gBAEA,OAAO;oBACL,aAAa,QAAQ,GAAG;gBAC1B;YACF;QACF;QACA,SAAS;YACP,UAAU,QAAQ,GAAG,CAAC,iBAAiB;YACvC,cAAc,QAAQ,GAAG,CAAC,qBAAqB;YAC/C,0BAA0B;YAC1B,kBAAkB,CAAC;gBACjB,QAAQ,GAAG,CAAC,yBAAyB,KAAK,SAAS,CAAC,SAAS,MAAM;gBAEnE,MAAM,aAAuC,CAAC;gBAE9C,IAAI,QAAQ,WAAW,EAAE;oBACvB,WAAW,WAAW,GAAG,QAAQ,WAAW;gBAC9C,OAAO,IAAI,QAAQ,IAAI,IAAI,QAAQ,IAAI,CAAC,WAAW,EAAE;oBACnD,WAAW,WAAW,GAAG,QAAQ,IAAI,CAAC,WAAW;gBACnD;gBAEA,OAAO;YACT;QACF;IACF;IACA,UAAU,CAAA,GAAA,oLAAA,CAAA,iBAAc,AAAD,EAAE,wHAAA,CAAA,KAAE,EAAE;QAC3B,UAAU;IACZ;IACA,WAAW;QACT,SAAS,CAAC,EAAE,OAAO,EAAE,IAAI,EAA+B;YACtD,QAAQ,GAAG,CAAC,4BAA4B,KAAK,SAAS,CAAC,MAAM,MAAM;YACnE,QAAQ,GAAG,CACT,wCACA,KAAK,SAAS,CAAC,SAAS,MAAM;YAGhC,IAAI,QAAQ,KAAK,WAAW,EAAE;gBAC5B,QAAQ,IAAI,CAAC,WAAW,GAAG,KAAK,WAAW;gBAC3C,QAAQ,GAAG,CAAC,uCAAuC,KAAK,WAAW;YACrE,OAAO;gBACL,QAAQ,GAAG,CAAC;YACd;YAEA,QAAQ,GAAG,CACT,sCACA,KAAK,SAAS,CAAC,SAAS,MAAM;YAEhC,OAAO;QACT;IACF;AACF","debugId":null}},
    {"offset": {"line": 468, "column": 0}, "map": {"version":3,"sources":["file:///Users/nathan/Desktop/showStack/app/api/tech/stack/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\n// import { headers } from \"next/headers\"; // Plus besoin si request.headers fonctionne\nimport { auth } from \"@/lib/auth\";\nimport { db } from \"@/drizzle/db\";\nimport { techStack, stackTechnologyItem } from \"@/drizzle/db/schema\";\nimport { eq, and, notInArray } from \"drizzle-orm\";\n\ninterface ApiTechItem {\n  id: string; // Correspond à stackTechnologyItem.id si existant, ou tech.id du frontend pour les nouveaux\n  name: string;\n  color: string;\n  technologyId: string; // L'ID de la technologie (ex: \"typescript\", \"react\")\n  category: string;\n  gridCols: number;\n  gridRows: number;\n  isProject?: boolean; // Pour les projets\n  favicon?: string; // URL du favicon pour les projets\n  url?: string; // URL du projet\n  description?: string; // Description du projet\n  order?: number; // Ordre pour le tri\n}\n\n// Obtenir la stack technologique de l'utilisateur connecté\nexport async function GET(request: Request) {\n  try {\n    const session = await auth.api.getSession({ headers: request.headers });\n\n    if (!session?.user?.id) {\n      return NextResponse.json(\n        { error: \"Vous devez être connecté\" },\n        { status: 401 }\n      );\n    }\n\n    const userStacksResults = await db.query.techStack.findMany({\n      where: eq(techStack.userId, session.user.id),\n      with: {\n        technologies: true,\n      },\n      orderBy: (techStack, { asc }) => [asc(techStack.createdAt)],\n    });\n\n    // Retourner toutes les stacks trouvées pour l'utilisateur\n    return NextResponse.json(userStacksResults);\n  } catch (error) {\n    console.error(\"Erreur lors de la récupération des stacks:\", error);\n    return NextResponse.json(\n      { error: \"Erreur lors de la récupération des stacks\" },\n      { status: 500 }\n    );\n  }\n}\n\n// Enregistrer la stack technologique de l'utilisateur\nexport async function POST(request: Request) {\n  try {\n    const session = await auth.api.getSession({ headers: request.headers });\n\n    if (!session?.user?.id) {\n      return NextResponse.json(\n        { error: \"Vous devez être connecté\" },\n        { status: 401 }\n      );\n    }\n\n    const { id, name, technologies } = (await request.json()) as {\n      id?: number; // ID de la techStack existante (optionnel)\n      name: string;\n      technologies: ApiTechItem[];\n    };\n\n    let currentStack: typeof techStack.$inferSelect | undefined | null;\n\n    const stackData = {\n      userId: session.user.id,\n      name: name,\n      updatedAt: new Date(),\n    };\n\n    if (id) {\n      // Mise à jour d'une stack existante\n      await db.update(techStack).set(stackData).where(eq(techStack.id, id));\n      currentStack = await db.query.techStack.findFirst({\n        where: eq(techStack.id, id),\n      });\n    } else {\n      // Création d'une nouvelle stack\n      const newStacks = await db\n        .insert(techStack)\n        .values({ ...stackData, createdAt: new Date() })\n        .returning();\n      currentStack = newStacks[0];\n    }\n\n    if (!currentStack) {\n      return NextResponse.json(\n        { error: \"Impossible de créer ou mettre à jour la stack\" },\n        { status: 500 }\n      );\n    }\n\n    const finalItemDbIds: number[] = [];\n\n    if (technologies && technologies.length > 0) {\n      for (const tech of technologies) {\n        const existingItemId = tech.id ? parseInt(tech.id) : NaN;\n\n        if (!isNaN(existingItemId)) {\n          // C'est un élément existant, on le met à jour\n          await db\n            .update(stackTechnologyItem)\n            .set({\n              name: tech.name,\n              color: tech.color,\n              technologyId: tech.technologyId,\n              category: tech.category || \"Custom\",\n              gridCols: tech.gridCols || 1,\n              gridRows: tech.gridRows || 1,\n              isProject: tech.isProject || false,\n              favicon: tech.favicon || null,\n              url: tech.url || null,\n              description: tech.description || null,\n              order: tech.order !== undefined ? tech.order : 0,\n            })\n            .where(eq(stackTechnologyItem.id, existingItemId));\n          finalItemDbIds.push(existingItemId);\n        } else {\n          // C'est un nouvel élément, on l'insère\n          // tech.id ici est l'identifiant de la technologie (ex: \"react\") ou un ID temporaire.\n          // L'ID réel de stackTechnologyItem sera auto-généré.\n          const newDbItems = await db\n            .insert(stackTechnologyItem)\n            .values({\n              techStackId: currentStack!.id,\n              technologyId: tech.technologyId, // Assurez-vous que cela est correctement fourni par le client\n              name: tech.name,\n              color: tech.color,\n              category: tech.category || \"Custom\",\n              gridCols: tech.gridCols || 1,\n              gridRows: tech.gridRows || 1,\n              isProject: tech.isProject || false,\n              favicon: tech.favicon || null,\n              url: tech.url || null,\n              description: tech.description || null,\n              order: tech.order !== undefined ? tech.order : 0,\n            })\n            .returning({ insertedId: stackTechnologyItem.id });\n\n          if (newDbItems && newDbItems[0] && newDbItems[0].insertedId) {\n            finalItemDbIds.push(newDbItems[0].insertedId);\n          } else {\n            console.error(\n              \"Impossible d'insérer la nouvelle technologie ou d'obtenir son ID:\",\n              tech\n            );\n            // Vous pourriez vouloir retourner une erreur ici si l'insertion est critique\n          }\n        }\n      }\n\n      // Supprimer les items de la DB qui n'étaient pas dans la liste finale (finalItemDbIds)\n      // Cela gère les suppressions faites côté client.\n      // `finalItemDbIds` contient les ID de DB de tous les items qui doivent exister (mis à jour ou nouvellement insérés).\n      if (currentStack?.id) {\n        if (finalItemDbIds.length > 0) {\n          await db\n            .delete(stackTechnologyItem)\n            .where(\n              and(\n                eq(stackTechnologyItem.techStackId, currentStack.id),\n                notInArray(stackTechnologyItem.id, finalItemDbIds)\n              )\n            );\n        } else {\n          // Si finalItemDbIds est vide mais technologies avait des items (qui ont échoué à l'insertion?),\n          // ou si technologies était vide initialement, on supprime tout pour cette stack.\n          // Ce dernier cas est couvert par le `else` plus bas. Si technologies n'est pas vide\n          // mais finalItemDbIds l'est, cela indique un problème d'insertion.\n          // Le comportement actuel de supprimer tout si finalItemDbIds est vide peut être trop agressif\n          // si des insertions ont échoué. Pour l'instant, on garde la logique de suppression si\n          // la liste finale d'IDs à conserver est vide.\n          await db\n            .delete(stackTechnologyItem)\n            .where(eq(stackTechnologyItem.techStackId, currentStack.id));\n        }\n      }\n    } else {\n      // Si le tableau `technologies` est vide, supprimer tous les items associés à cette stack\n      if (currentStack?.id) {\n        await db\n          .delete(stackTechnologyItem)\n          .where(eq(stackTechnologyItem.techStackId, currentStack.id));\n      }\n    }\n\n    // Utiliser une requête manuelle pour s'assurer que toutes les colonnes sont incluses\n    const techItems = await db.query.stackTechnologyItem.findMany({\n      where: eq(stackTechnologyItem.techStackId, currentStack.id),\n    });\n\n    console.log(\"Technologies récupérées directement:\", techItems);\n\n    const updatedStackWithTechnologies = {\n      ...currentStack,\n      technologies: techItems,\n    };\n\n    console.log(\n      \"Technologies renvoyées par l'API:\",\n      updatedStackWithTechnologies.technologies\n    );\n\n    return NextResponse.json(updatedStackWithTechnologies);\n  } catch (error) {\n    console.error(\"Erreur lors de l'enregistrement de la stack:\", error);\n    return NextResponse.json(\n      { error: \"Erreur lors de l'enregistrement de la stack\" },\n      { status: 500 }\n    );\n  }\n}\n\n// Supprimer une technologie spécifique ou une stack entière\nexport async function DELETE(request: Request) {\n  try {\n    const session = await auth.api.getSession({ headers: request.headers });\n\n    if (!session?.user?.id) {\n      return NextResponse.json(\n        { error: \"Vous devez être connecté\" },\n        { status: 401 }\n      );\n    }\n\n    const { searchParams } = new URL(request.url);\n    const itemId = searchParams.get(\"id\");\n\n    if (!itemId) {\n      return NextResponse.json({ error: \"ID manquant\" }, { status: 400 });\n    }\n\n    // Tentative de conversion en nombre\n    const idAsNumber = parseInt(itemId, 10);\n    if (isNaN(idAsNumber)) {\n      return NextResponse.json({ error: \"ID invalide\" }, { status: 400 });\n    }\n\n    // Vérifier si le paramètre stackId est présent pour savoir si on supprime une stack entière\n    const isStack = searchParams.has(\"stackId\");\n\n    if (isStack) {\n      // Vérifier que la stack appartient bien à l'utilisateur\n      const stack = await db.query.techStack.findFirst({\n        where: (techStack) =>\n          eq(techStack.id, idAsNumber) && eq(techStack.userId, session.user.id),\n      });\n\n      if (!stack) {\n        return NextResponse.json(\n          { error: \"Stack non trouvée ou vous n'avez pas les droits\" },\n          { status: 404 }\n        );\n      }\n\n      // Supprimer la stack (les technologies associées seront supprimées automatiquement grâce à onDelete: \"cascade\")\n      const deletedStacks = await db\n        .delete(techStack)\n        .where(eq(techStack.id, idAsNumber))\n        .returning();\n\n      if (deletedStacks.length === 0) {\n        return NextResponse.json(\n          { error: \"Stack non trouvée ou déjà supprimée\" },\n          { status: 404 }\n        );\n      }\n\n      return NextResponse.json({ message: \"Stack supprimée avec succès\" });\n    } else {\n      // Vérifier que l'item appartient bien à une stack de l'utilisateur actuel\n      const item = await db.query.stackTechnologyItem.findFirst({\n        where: eq(stackTechnologyItem.id, idAsNumber),\n        with: {\n          techStack: true,\n        },\n      });\n\n      if (!item || item.techStack.userId !== session.user.id) {\n        return NextResponse.json(\n          { error: \"Technologie non trouvée ou vous n'avez pas les droits\" },\n          { status: 404 }\n        );\n      }\n\n      // Supprimer la technologie\n      const deletedItems = await db\n        .delete(stackTechnologyItem)\n        .where(eq(stackTechnologyItem.id, idAsNumber))\n        .returning();\n\n      if (deletedItems.length === 0) {\n        return NextResponse.json(\n          { error: \"Technologie non trouvée ou déjà supprimée\" },\n          { status: 404 }\n        );\n      }\n\n      return NextResponse.json({\n        message: \"Technologie supprimée avec succès\",\n      });\n    }\n  } catch (error) {\n    console.error(\"Erreur lors de la suppression:\", error);\n    return NextResponse.json(\n      { error: \"Erreur lors de la suppression\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}