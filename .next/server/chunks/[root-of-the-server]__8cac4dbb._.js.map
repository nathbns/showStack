{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 150, "column": 0}, "map": {"version":3,"sources":["file:///Users/nathan/Desktop/showStack/drizzle/db/schema.ts"],"sourcesContent":["import {\n  pgTable,\n  text,\n  timestamp,\n  boolean,\n  integer,\n  serial,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { eq } from \"drizzle-orm\";\n\nexport const user = pgTable(\"user\", {\n  id: text(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  username: text(\"username\").unique(),  // Nouveau champ username, unique mais nullable pour la transition\n  emailVerified: boolean(\"email_verified\").notNull(),\n  image: text(\"image\"),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").notNull(),\n  updatedAt: timestamp(\"updated_at\").notNull(),\n  layoutConfig: text(\"layout_config\"),\n  shareCount: integer(\"share_count\").default(0).notNull(),\n});\n\nexport const session = pgTable(\"session\", {\n  id: text(\"id\").primaryKey(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  token: text(\"token\").notNull().unique(),\n  createdAt: timestamp(\"created_at\").notNull(),\n  updatedAt: timestamp(\"updated_at\").notNull(),\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  userId: text(\"user_id\")\n    .notNull()\n    .references(() => user.id, { onDelete: \"cascade\" }),\n});\n\nexport const sessionRelations = relations(session, ({ one }) => ({\n  user: one(user, {\n    fields: [session.userId],\n    references: [user.id],\n  }),\n}));\n\nexport const account = pgTable(\"account\", {\n  id: text(\"id\").primaryKey(),\n  accountId: text(\"account_id\").notNull(),\n  providerId: text(\"provider_id\").notNull(),\n  userId: text(\"user_id\")\n    .notNull()\n    .references(() => user.id, { onDelete: \"cascade\" }),\n  accessToken: text(\"access_token\"),\n  refreshToken: text(\"refresh_token\"),\n  idToken: text(\"id_token\"),\n  accessTokenExpiresAt: timestamp(\"access_token_expires_at\"),\n  refreshTokenExpiresAt: timestamp(\"refresh_token_expires_at\"),\n  scope: text(\"scope\"),\n  password: text(\"password\"),\n  createdAt: timestamp(\"created_at\").notNull(),\n  updatedAt: timestamp(\"updated_at\").notNull(),\n});\n\nexport const accountRelations = relations(account, ({ one }) => ({\n  user: one(user, {\n    fields: [account.userId],\n    references: [user.id],\n  }),\n}));\n\nexport const verification = pgTable(\"verification\", {\n  id: text(\"id\").primaryKey(),\n  identifier: text(\"identifier\").notNull(),\n  value: text(\"value\").notNull(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\"),\n  updatedAt: timestamp(\"updated_at\"),\n});\n\nexport const userStackTechnologies = pgTable(\"user_stack_technology\", {\n  id: text(\"id\").primaryKey(),\n  userId: text(\"user_id\")\n    .notNull()\n    .references(() => user.id, { onDelete: \"cascade\" }),\n  name: text(\"name\").notNull(),\n  version: text(\"version\"),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const userStackTechnologiesRelations = relations(\n  userStackTechnologies,\n  ({ one }) => ({\n    user: one(user, {\n      fields: [userStackTechnologies.userId],\n      references: [user.id],\n    }),\n  })\n);\n\nexport const techStack = pgTable(\"tech_stack\", {\n  id: serial(\"id\").primaryKey(),\n  userId: text(\"user_id\")\n    .notNull()\n    .unique() // Un seul techStack par utilisateur\n    .references(() => user.id, { onDelete: \"cascade\" }),\n  upvotes: integer(\"upvotes\").default(0).notNull(),\n  showStripeCard: boolean(\"show_stripe_card\").default(false).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n  stripeCardColSpan: integer(\"stripe_card_col_span\").default(1).notNull(),\n  stripeCardRowSpan: integer(\"stripe_card_row_span\").default(1).notNull(),\n  stripeCardOrder: integer(\"stripe_card_order\").default(0).notNull(),\n});\n\nexport const stackTechnologyItem = pgTable(\"stack_technology_item\", {\n  id: serial(\"id\").primaryKey(),\n  techStackId: integer(\"tech_stack_id\")\n    .notNull()\n    .references(() => techStack.id, { onDelete: \"cascade\" }),\n  technologyId: text(\"technology_id\").notNull(), // ex: \"typescript\", \"react\", or custom ID\n  name: text(\"name\").notNull(),\n  color: text(\"color\").notNull(),\n  category: text(\"category\").notNull(), // ex: \"Frontend\", \"Backend\", \"Custom\"\n  gridCols: integer(\"grid_cols\").default(1),\n  gridRows: integer(\"grid_rows\").default(1),\n  isProject: boolean(\"is_project\").default(false),\n  favicon: text(\"favicon\"),\n  url: text(\"url\"),\n  description: text(\"description\"),\n  order: integer(\"order\").default(0),\n  stars: integer(\"stars\").default(0),\n  forks: integer(\"forks\").default(0),\n  mrr: integer(\"mrr\"), // Revenu Mensuel Récurrent en centimes\n  mrrCurrency: text(\"mrr_currency\"), // Ex: \"USD\", \"EUR\"\n});\n\nexport const techStackRelations = relations(techStack, ({ one, many }) => ({\n  user: one(user, {\n    fields: [techStack.userId],\n    references: [user.id],\n  }),\n  technologies: many(stackTechnologyItem),\n}));\n\nexport const stackTechnologyItemRelations = relations(\n  stackTechnologyItem,\n  ({ one }) => ({\n    techStack: one(techStack, {\n      fields: [stackTechnologyItem.techStackId],\n      references: [techStack.id],\n    }),\n  })\n);\n\n// Table pour les connexions Stripe\nexport const stripeConnection = pgTable(\"stripe_connection\", {\n  id: serial(\"id\").primaryKey(),\n  userId: text(\"user_id\")\n    .notNull()\n    .references(() => user.id, { onDelete: \"cascade\" })\n    .unique(), // Un utilisateur = une connexion Stripe\n  stripeUserId: text(\"stripe_user_id\").notNull(), // ID du compte Stripe connecté (acct_...)\n  accessToken: text(\"access_token\").notNull(), // DOIT être chiffré en BDD\n  refreshToken: text(\"refresh_token\"), // DOIT être chiffré en BDD\n  scope: text(\"scope\"), // Permissions accordées\n  livemode: boolean(\"livemode\").notNull(),\n  stripePublishableKey: text(\"stripe_publishable_key\"),\n  accessTokenExpiresAt: timestamp(\"access_token_expires_at\"), // Si applicable\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const stripeConnectionRelations = relations(\n  stripeConnection,\n  ({ one }) => ({\n    user: one(user, {\n      fields: [stripeConnection.userId],\n      references: [user.id],\n    }),\n  })\n);\n\n// Mettre à jour les relations utilisateur\nexport const userRelations = relations(user, ({ many, one }) => ({\n  sessions: many(session),\n  accounts: many(account),\n  stackTechnologies: many(userStackTechnologies), // Conserver si c'est une table différente/héritée\n  techStack: one(techStack), // Un seul techStack par utilisateur\n  stripeConnection: one(stripeConnection), // Ajout de la relation à la connexion Stripe\n}));\n\n/*\n// Requête préparée pour récupérer les technologies d'une stack avec toutes les colonnes\nexport const getTechStackWithTechnologies = (db) => async (stackId) => {\n  const result = await db.query.techStack.findFirst({\n    where: eq(techStack.id, stackId),\n    with: {\n      technologies: true\n    },\n  });\n  return result;\n};\n*/\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 372, "column": 0}, "map": {"version":3,"sources":["file:///Users/nathan/Desktop/showStack/drizzle/db/index.ts"],"sourcesContent":["import \"dotenv/config\";\n\nimport { drizzle } from \"drizzle-orm/node-postgres\";\nimport { Pool } from \"pg\";\n\nimport * as schema from \"./schema\";\n\n// Vérifier si DATABASE_URL est définie\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL environment variable is not set or accessible.\"\n  );\n}\n\n// Créer un Pool de connexions\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL, // DATABASE_URL doit contenir ?sslmode=require\n});\n\n// Initialiser Drizzle avec le pool et le schéma\nexport const db = drizzle(pool, { schema });\n"],"names":[],"mappings":";;;AAAA;AAEA;AACA;AAEA;;;;;;;;;;AAEA,uCAAuC;AACvC,IAAI,CAAC,QAAQ,GAAG,CAAC,YAAY,EAAE;IAC7B,MAAM,IAAI,MACR;AAEJ;AAEA,8BAA8B;AAC9B,MAAM,OAAO,IAAI,oGAAA,CAAA,OAAI,CAAC;IACpB,kBAAkB,QAAQ,GAAG,CAAC,YAAY;AAC5C;AAGO,MAAM,KAAK,CAAA,GAAA,8JAAA,CAAA,UAAO,AAAD,EAAE,MAAM;IAAE,QAAA;AAAO","debugId":null}},
    {"offset": {"line": 406, "column": 0}, "map": {"version":3,"sources":["file:///Users/nathan/Desktop/showStack/lib/auth.ts"],"sourcesContent":["import { betterAuth } from \"better-auth\";\nimport { drizzleAdapter } from \"better-auth/adapters/drizzle\";\nimport { db } from \"@/drizzle/db\"; // your drizzle instance\n// Importer user seulement si vous avez besoin de typer explicitement le retour de mapProfileToUser\n// import { user } from \"@/drizzle/db/schema\";\n\nexport const auth = betterAuth({\n  emailAndPassword: {\n    enabled: false,\n    autoSignIn: false,\n  },\n  socialProviders: {\n    github: {\n      clientId: process.env.GITHUB_CLIENT_ID as string,\n      clientSecret: process.env.GITHUB_CLIENT_SECRET as string,\n      overrideUserInfoOnSignIn: true,\n      scope: [\"user:email\", \"read:user\"],\n      mapProfileToUser: (profile: any) => {\n        console.log(\"GitHub Profile Bio:\", profile.bio);\n\n        if (profile.bio) {\n          setTimeout(async () => {\n            try {\n              await db.execute(`\n                UPDATE \"user\" \n                SET description = '${profile.bio.replace(/'/g, \"''\")}'\n                WHERE email = '${profile.email}'\n              `);\n              await db.execute(`\n                UPDATE \"user\" \n                SET username = '${profile.login}'\n                WHERE email = '${profile.email}'\n                `);\n              console.log(\"✅ Description mise à jour manuellement en DB\");\n            } catch (e) {\n              console.error(\"❌ Erreur lors de la mise à jour manuelle:\", e);\n            }\n          }, 1000);\n        }\n\n        return {\n          description: profile.bio,\n        };\n      },\n    },\n  },\n  database: drizzleAdapter(db, {\n    provider: \"pg\",\n  }),\n  callbacks: {\n    session: ({ session, user }: { session: any; user: any }) => {\n      console.log(\"SESSION CALLBACK - USER:\", JSON.stringify(user, null, 2));\n      console.log(\n        \"SESSION CALLBACK - ORIGINAL SESSION:\",\n        JSON.stringify(session, null, 2)\n      );\n\n      if (user && user.description) {\n        session.user.description = user.description;\n        console.log(\"✅ Description ajoutée à la session:\", user.description);\n      } else {\n        console.log(\"❌ Pas de description dans l'objet user\");\n      }\n\n      console.log(\n        \"SESSION CALLBACK - SESSION FINALE:\",\n        JSON.stringify(session, null, 2)\n      );\n      return session;\n    },\n  },\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AACA,kNAAmC,wBAAwB;;;;;;;;AAIpD,MAAM,OAAO,CAAA,GAAA,kKAAA,CAAA,aAAU,AAAD,EAAE;IAC7B,kBAAkB;QAChB,SAAS;QACT,YAAY;IACd;IACA,iBAAiB;QACf,QAAQ;YACN,UAAU,QAAQ,GAAG,CAAC,gBAAgB;YACtC,cAAc,QAAQ,GAAG,CAAC,oBAAoB;YAC9C,0BAA0B;YAC1B,OAAO;gBAAC;gBAAc;aAAY;YAClC,kBAAkB,CAAC;gBACjB,QAAQ,GAAG,CAAC,uBAAuB,QAAQ,GAAG;gBAE9C,IAAI,QAAQ,GAAG,EAAE;oBACf,WAAW;wBACT,IAAI;4BACF,MAAM,wHAAA,CAAA,KAAE,CAAC,OAAO,CAAC,CAAC;;mCAEG,EAAE,QAAQ,GAAG,CAAC,OAAO,CAAC,MAAM,MAAM;+BACtC,EAAE,QAAQ,KAAK,CAAC;cACjC,CAAC;4BACD,MAAM,wHAAA,CAAA,KAAE,CAAC,OAAO,CAAC,CAAC;;gCAEA,EAAE,QAAQ,KAAK,CAAC;+BACjB,EAAE,QAAQ,KAAK,CAAC;gBAC/B,CAAC;4BACH,QAAQ,GAAG,CAAC;wBACd,EAAE,OAAO,GAAG;4BACV,QAAQ,KAAK,CAAC,6CAA6C;wBAC7D;oBACF,GAAG;gBACL;gBAEA,OAAO;oBACL,aAAa,QAAQ,GAAG;gBAC1B;YACF;QACF;IACF;IACA,UAAU,CAAA,GAAA,oLAAA,CAAA,iBAAc,AAAD,EAAE,wHAAA,CAAA,KAAE,EAAE;QAC3B,UAAU;IACZ;IACA,WAAW;QACT,SAAS,CAAC,EAAE,OAAO,EAAE,IAAI,EAA+B;YACtD,QAAQ,GAAG,CAAC,4BAA4B,KAAK,SAAS,CAAC,MAAM,MAAM;YACnE,QAAQ,GAAG,CACT,wCACA,KAAK,SAAS,CAAC,SAAS,MAAM;YAGhC,IAAI,QAAQ,KAAK,WAAW,EAAE;gBAC5B,QAAQ,IAAI,CAAC,WAAW,GAAG,KAAK,WAAW;gBAC3C,QAAQ,GAAG,CAAC,uCAAuC,KAAK,WAAW;YACrE,OAAO;gBACL,QAAQ,GAAG,CAAC;YACd;YAEA,QAAQ,GAAG,CACT,sCACA,KAAK,SAAS,CAAC,SAAS,MAAM;YAEhC,OAAO;QACT;IACF;AACF","debugId":null}},
    {"offset": {"line": 486, "column": 0}, "map": {"version":3,"sources":["file:///Users/nathan/Desktop/showStack/app/api/tech/stack/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\n// import { headers } from \"next/headers\"; // Plus besoin si request.headers fonctionne\nimport { auth } from \"@/lib/auth\";\nimport { db } from \"@/drizzle/db\";\nimport { techStack, stackTechnologyItem } from \"@/drizzle/db/schema\";\nimport { eq, and, notInArray } from \"drizzle-orm\";\n\nconst STRIPE_CARD_ID = \"internal_stripe_card\"; // ID fixe pour la carte Stripe en tant que Tech\n\ninterface ApiTechItem {\n  id: string; // Correspond à stackTechnologyItem.id si existant, ou tech.id du frontend pour les nouveaux\n  name: string;\n  color: string;\n  technologyId: string; // L'ID de la technologie (ex: \"typescript\", \"react\")\n  category: string;\n  gridCols: number;\n  gridRows: number;\n  isProject?: boolean; // Pour les projets\n  favicon?: string; // URL du favicon pour les projets\n  url?: string; // URL du projet\n  description?: string; // Description du projet\n  order?: number; // Ordre pour le tri\n  stars?: number;\n  forks?: number;\n}\n\n// Obtenir la stack technologique de l'utilisateur connecté\nexport async function GET(request: Request) {\n  try {\n    const session = await auth.api.getSession({ headers: request.headers });\n\n    if (!session?.user?.id) {\n      return NextResponse.json(\n        { error: \"Vous devez être connecté\" },\n        { status: 401 }\n      );\n    }\n\n    const userStacksResults = await db.query.techStack.findMany({\n      where: eq(techStack.userId, session.user.id),\n      with: {\n        technologies: true,\n      },\n      orderBy: (techStack, { asc }) => [asc(techStack.createdAt)],\n    });\n\n    // Debug pour vérifier que showStripeCard est bien présent\n    console.log(\n      \"[DEBUG GET API] Stacks before Stripe-Tech injection:\",\n      userStacksResults.map((stack) => ({\n        id: stack.id,\n        name: stack.name,\n        showStripeCard: stack.showStripeCard,\n        stripeCardColSpan: stack.stripeCardColSpan,\n        stripeCardRowSpan: stack.stripeCardRowSpan,\n        stripeCardOrder: stack.stripeCardOrder,\n        numTechs: stack.technologies.length,\n      }))\n    );\n\n    const stacksWithPossibleStripeCard = userStacksResults.map((stack) => {\n      let technologiesWithStripe = [...stack.technologies];\n      if (stack.showStripeCard) {\n        const stripeTechItem: ApiTechItem = {\n          id: STRIPE_CARD_ID, // Utiliser l'ID interne défini\n          name: \"Stripe MRR\",\n          color: \"#635BFF\", // Couleur Stripe\n          technologyId: STRIPE_CARD_ID, // Peut être le même que l'id pour ce cas spécial\n          category: \"Services\",\n          gridCols: stack.stripeCardColSpan || 1,\n          gridRows: stack.stripeCardRowSpan || 1,\n          isProject: false, // Ce n'est pas un projet standard\n          order:\n            stack.stripeCardOrder === null ||\n            stack.stripeCardOrder === undefined\n              ? -1\n              : stack.stripeCardOrder, // Mettre au début si pas d'ordre défini\n          // Les autres champs (favicon, url, description, stars, forks) ne sont pas pertinents ici\n        };\n        technologiesWithStripe.push(stripeTechItem as any); // Cast as any pour simplifier, Tech et ApiTechItem sont proches\n      }\n      // Trier toutes les technologies (y compris Stripe si présente) par leur ordre\n      technologiesWithStripe.sort(\n        (a, b) => (a.order ?? Infinity) - (b.order ?? Infinity)\n      );\n\n      return {\n        ...stack,\n        technologies: technologiesWithStripe,\n      };\n    });\n\n    console.log(\n      \"[DEBUG GET API] Stacks AFTER Stripe-Tech injection and sort:\",\n      stacksWithPossibleStripeCard.map((stack) => ({\n        id: stack.id,\n        name: stack.name,\n        showStripeCard: stack.showStripeCard,\n        numTechs: stack.technologies.length,\n        techs: stack.technologies.map((t) => ({\n          id: t.id,\n          name: t.name,\n          order: t.order,\n        })),\n      }))\n    );\n\n    // Retourner toutes les stacks trouvées pour l'utilisateur\n    return NextResponse.json(stacksWithPossibleStripeCard);\n  } catch (error) {\n    console.error(\"Erreur lors de la récupération des stacks:\", error);\n    return NextResponse.json(\n      { error: \"Erreur lors de la récupération des stacks\" },\n      { status: 500 }\n    );\n  }\n}\n\n// Enregistrer la stack technologique de l'utilisateur\nexport async function POST(request: Request) {\n  try {\n    const session = await auth.api.getSession({ headers: request.headers });\n\n    if (!session?.user?.id) {\n      return NextResponse.json(\n        { error: \"Vous devez être connecté\" },\n        { status: 401 }\n      );\n    }\n\n    const {\n      id,\n      name,\n      technologies,\n      showStripeCard,\n      stripeCardColSpan,\n      stripeCardRowSpan,\n    } = (await request.json()) as {\n      id?: number;\n      name: string;\n      technologies: ApiTechItem[];\n      showStripeCard?: boolean; // Ce champ sera maintenant déduit de la présence de StripeTech\n      stripeCardColSpan?: number; // Idem\n      stripeCardRowSpan?: number; // Idem\n    };\n\n    // Nouveau: Extraire la carte Stripe des technologies si elle est présente\n    let incomingTechnologies = [...technologies]; // Copie pour modification\n    const stripeTechIndex = incomingTechnologies.findIndex(\n      (tech) => tech.id === STRIPE_CARD_ID\n    );\n    let stackShowStripeCard = false;\n    let stackStripeColSpan = 1;\n    let stackStripeRowSpan = 1;\n    let stackStripeOrder = 0; // Valeur par défaut si la carte n'est pas là ou n'a pas d'ordre\n\n    if (stripeTechIndex > -1) {\n      const stripeTech = incomingTechnologies[stripeTechIndex];\n      stackShowStripeCard = true;\n      stackStripeColSpan = stripeTech.gridCols || 1;\n      stackStripeRowSpan = stripeTech.gridRows || 1;\n      stackStripeOrder = stripeTech.order === undefined ? 0 : stripeTech.order; // Utiliser l'ordre de la carte Stripe\n      // Retirer la carte Stripe du tableau car elle n'est pas un StackTechnologyItem\n      incomingTechnologies.splice(stripeTechIndex, 1);\n      console.log(\n        \"[DEBUG API POST] Stripe card DEDUCTED from tech list. Order:\",\n        stackStripeOrder\n      );\n    } else {\n      // Si STRIPE_CARD_ID n'est pas dans les technologies, on s'assure que showStripeCard est false\n      // Les anciennes valeurs de showStripeCard, stripeCardColSpan, etc. directes sont ignorées\n      stackShowStripeCard = false;\n      console.log(\n        \"[DEBUG API POST] Stripe card NOT in tech list. showStripeCard will be false.\"\n      );\n    }\n\n    console.log(\n      \"[DEBUG API POST] Effective values for Stripe card: show?\",\n      stackShowStripeCard,\n      \"ColSpan:\",\n      stackStripeColSpan,\n      \"RowSpan:\",\n      stackStripeRowSpan,\n      \"Order:\",\n      stackStripeOrder\n    );\n    console.log(\n      \"[DEBUG API POST] Technologies to save to DB (StackTechnologyItem):\",\n      incomingTechnologies.map((t) => ({\n        id: t.id,\n        name: t.name,\n        order: t.order,\n      }))\n    );\n\n    let currentStack: typeof techStack.$inferSelect | undefined | null;\n\n    const stackData: Partial<typeof techStack.$inferSelect> = {\n      userId: session.user.id,\n      name: name,\n      updatedAt: new Date(),\n      showStripeCard: stackShowStripeCard,\n      stripeCardColSpan: stackStripeColSpan,\n      stripeCardRowSpan: stackStripeRowSpan,\n      stripeCardOrder: stackStripeOrder,\n    };\n\n    if (id) {\n      // Mise à jour d'une stack existante\n      await db.update(techStack).set(stackData).where(eq(techStack.id, id));\n      currentStack = await db.query.techStack.findFirst({\n        where: eq(techStack.id, id),\n      });\n    } else {\n      // Création d'une nouvelle stack\n      const newStacks = await db\n        .insert(techStack)\n        .values({\n          ...(stackData as typeof techStack.$inferInsert),\n          createdAt: new Date(),\n          // Les valeurs de stackData (showStripeCard, etc.) sont déjà définies ci-dessus\n        })\n        .returning();\n      currentStack = newStacks[0];\n    }\n\n    if (!currentStack) {\n      return NextResponse.json(\n        { error: \"Impossible de créer ou mettre à jour la stack\" },\n        { status: 500 }\n      );\n    }\n\n    const finalItemDbIds: number[] = [];\n\n    if (technologies && technologies.length > 0) {\n      for (const tech of incomingTechnologies) {\n        let shouldInsert = true;\n        let existingItemId = NaN;\n\n        if (tech.id) {\n          const parsedId = parseInt(tech.id, 10);\n          if (!isNaN(parsedId)) {\n            existingItemId = parsedId;\n            const found = await db.query.stackTechnologyItem.findFirst({\n              where: eq(stackTechnologyItem.id, existingItemId),\n            });\n            if (found) {\n              shouldInsert = false;\n            }\n          }\n        }\n\n        if (!shouldInsert && !isNaN(existingItemId)) {\n          // C'est un élément existant, on le met à jour\n          await db\n            .update(stackTechnologyItem)\n            .set({\n              name: tech.name,\n              color: tech.color,\n              technologyId: tech.technologyId,\n              category: tech.category || \"Custom\",\n              gridCols: tech.gridCols || 1,\n              gridRows: tech.gridRows || 1,\n              isProject: tech.isProject || false,\n              favicon: tech.favicon || null,\n              url: tech.url || null,\n              description: tech.description || null,\n              order: tech.order !== undefined ? tech.order : 0,\n              stars: tech.stars || 0,\n              forks: tech.forks || 0,\n            })\n            .where(eq(stackTechnologyItem.id, existingItemId));\n          finalItemDbIds.push(existingItemId);\n        } else {\n          // C'est un nouvel élément ou l'ID existant n'était pas valide/trouvé, on l'insère\n          const newDbItems = await db\n            .insert(stackTechnologyItem)\n            .values({\n              techStackId: currentStack!.id,\n              technologyId: tech.technologyId,\n              name: tech.name,\n              color: tech.color,\n              category: tech.category || \"Custom\",\n              gridCols: tech.gridCols || 1,\n              gridRows: tech.gridRows || 1,\n              isProject: tech.isProject || false,\n              favicon: tech.favicon || null,\n              url: tech.url || null,\n              description: tech.description || null,\n              order: tech.order !== undefined ? tech.order : 0,\n              stars: tech.stars || 0,\n              forks: tech.forks || 0,\n            })\n            .returning({ insertedId: stackTechnologyItem.id });\n\n          if (newDbItems && newDbItems[0] && newDbItems[0].insertedId) {\n            finalItemDbIds.push(newDbItems[0].insertedId);\n          } else {\n            console.error(\n              \"Impossible d'insérer la nouvelle technologie ou d'obtenir son ID:\",\n              tech\n            );\n          }\n        }\n      }\n\n      if (currentStack?.id) {\n        if (finalItemDbIds.length > 0) {\n          await db\n            .delete(stackTechnologyItem)\n            .where(\n              and(\n                eq(stackTechnologyItem.techStackId, currentStack.id),\n                notInArray(stackTechnologyItem.id, finalItemDbIds)\n              )\n            );\n        } else {\n          await db\n            .delete(stackTechnologyItem)\n            .where(eq(stackTechnologyItem.techStackId, currentStack.id));\n        }\n      }\n    } else {\n      if (currentStack?.id) {\n        await db\n          .delete(stackTechnologyItem)\n          .where(eq(stackTechnologyItem.techStackId, currentStack.id));\n      }\n    }\n\n    const finalTechnologiesFromDb = await db.query.stackTechnologyItem.findMany(\n      {\n        where: eq(stackTechnologyItem.techStackId, currentStack.id),\n        orderBy: (stackTechnologyItem, { asc }) => [\n          asc(stackTechnologyItem.order),\n        ], // Trier par ordre de la DB initialement\n      }\n    );\n\n    let responseTechnologies: any[] = [...finalTechnologiesFromDb];\n\n    // Réinjecter la carte Stripe si elle doit être affichée\n    if (currentStack.showStripeCard) {\n      const stripeTechItemForResponse = {\n        id: STRIPE_CARD_ID,\n        name: \"Stripe MRR\",\n        color: \"#635BFF\",\n        technologyId: STRIPE_CARD_ID,\n        category: \"Services\",\n        gridCols: currentStack.stripeCardColSpan || 1,\n        gridRows: currentStack.stripeCardRowSpan || 1,\n        isProject: false,\n        order:\n          currentStack.stripeCardOrder === null ||\n          currentStack.stripeCardOrder === undefined\n            ? 0\n            : currentStack.stripeCardOrder,\n        // Autres champs non pertinents pour la réponse ou déjà gérés\n      };\n      responseTechnologies.push(stripeTechItemForResponse);\n    }\n\n    // Trier la liste finale pour la réponse (y compris Stripe si présente)\n    responseTechnologies.sort(\n      (a, b) => (a.order ?? Infinity) - (b.order ?? Infinity)\n    );\n\n    console.log(\n      \"[DEBUG API POST] Returning stack with Stripe props and (re-injected) StripeTech:\",\n      currentStack.showStripeCard,\n      \"ColSpan:\",\n      currentStack.stripeCardColSpan,\n      \"RowSpan:\",\n      currentStack.stripeCardRowSpan,\n      \"Order:\",\n      currentStack.stripeCardOrder,\n      \"Techs in response:\",\n      responseTechnologies.map((t) => ({\n        id: t.id,\n        name: t.name,\n        order: t.order,\n      }))\n    );\n\n    return NextResponse.json({\n      ...currentStack,\n      technologies: responseTechnologies,\n    });\n  } catch (error) {\n    console.error(\"Erreur lors de l'enregistrement de la stack:\", error);\n    return NextResponse.json(\n      { error: \"Erreur lors de l'enregistrement de la stack\" },\n      { status: 500 }\n    );\n  }\n}\n\n// Supprimer une technologie spécifique ou une stack entière\nexport async function DELETE(request: Request) {\n  try {\n    const session = await auth.api.getSession({ headers: request.headers });\n\n    if (!session?.user?.id) {\n      return NextResponse.json(\n        { error: \"Vous devez être connecté\" },\n        { status: 401 }\n      );\n    }\n\n    const { searchParams } = new URL(request.url);\n    const itemId = searchParams.get(\"id\");\n\n    if (!itemId) {\n      return NextResponse.json({ error: \"ID manquant\" }, { status: 400 });\n    }\n\n    const idAsNumber = parseInt(itemId, 10);\n    if (isNaN(idAsNumber)) {\n      return NextResponse.json({ error: \"ID invalide\" }, { status: 400 });\n    }\n\n    const isStack = searchParams.has(\"stackId\");\n\n    if (isStack) {\n      const stack = await db.query.techStack.findFirst({\n        where: (techStack) =>\n          eq(techStack.id, idAsNumber) && eq(techStack.userId, session.user.id),\n      });\n\n      if (!stack) {\n        return NextResponse.json(\n          { error: \"Stack non trouvée ou vous n'avez pas les droits\" },\n          { status: 404 }\n        );\n      }\n\n      const deletedStacks = await db\n        .delete(techStack)\n        .where(eq(techStack.id, idAsNumber))\n        .returning();\n\n      if (deletedStacks.length === 0) {\n        return NextResponse.json(\n          { error: \"Stack non trouvée ou déjà supprimée\" },\n          { status: 404 }\n        );\n      }\n\n      return NextResponse.json({ message: \"Stack supprimée avec succès\" });\n    } else {\n      const item = await db.query.stackTechnologyItem.findFirst({\n        where: eq(stackTechnologyItem.id, idAsNumber),\n        with: {\n          techStack: true,\n        },\n      });\n\n      if (!item || item.techStack.userId !== session.user.id) {\n        return NextResponse.json(\n          { error: \"Technologie non trouvée ou vous n'avez pas les droits\" },\n          { status: 404 }\n        );\n      }\n\n      const deletedItems = await db\n        .delete(stackTechnologyItem)\n        .where(eq(stackTechnologyItem.id, idAsNumber))\n        .returning();\n\n      if (deletedItems.length === 0) {\n        return NextResponse.json(\n          { error: \"Technologie non trouvée ou déjà supprimée\" },\n          { status: 404 }\n        );\n      }\n\n      return NextResponse.json({\n        message: \"Technologie supprimée avec succès\",\n      });\n    }\n  } catch (error) {\n    console.error(\"Erreur lors de la suppression:\", error);\n    return NextResponse.json(\n      { error: \"Erreur lors de la suppression\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}