{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 150, "column": 0}, "map": {"version":3,"sources":["file:///Users/nathan/Desktop/next/showStack/drizzle/db/schema.ts"],"sourcesContent":["import {\n  pgTable,\n  text,\n  timestamp,\n  boolean,\n  integer,\n  serial,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\n\nexport const user = pgTable(\"user\", {\n  id: text(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  emailVerified: boolean(\"email_verified\").notNull(),\n  image: text(\"image\"),\n  createdAt: timestamp(\"created_at\").notNull(),\n  updatedAt: timestamp(\"updated_at\").notNull(),\n});\n\nexport const session = pgTable(\"session\", {\n  id: text(\"id\").primaryKey(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  token: text(\"token\").notNull().unique(),\n  createdAt: timestamp(\"created_at\").notNull(),\n  updatedAt: timestamp(\"updated_at\").notNull(),\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  userId: text(\"user_id\")\n    .notNull()\n    .references(() => user.id, { onDelete: \"cascade\" }),\n});\n\nexport const sessionRelations = relations(session, ({ one }) => ({\n  user: one(user, {\n    fields: [session.userId],\n    references: [user.id],\n  }),\n}));\n\nexport const account = pgTable(\"account\", {\n  id: text(\"id\").primaryKey(),\n  accountId: text(\"account_id\").notNull(),\n  providerId: text(\"provider_id\").notNull(),\n  userId: text(\"user_id\")\n    .notNull()\n    .references(() => user.id, { onDelete: \"cascade\" }),\n  accessToken: text(\"access_token\"),\n  refreshToken: text(\"refresh_token\"),\n  idToken: text(\"id_token\"),\n  accessTokenExpiresAt: timestamp(\"access_token_expires_at\"),\n  refreshTokenExpiresAt: timestamp(\"refresh_token_expires_at\"),\n  scope: text(\"scope\"),\n  password: text(\"password\"),\n  createdAt: timestamp(\"created_at\").notNull(),\n  updatedAt: timestamp(\"updated_at\").notNull(),\n});\n\nexport const accountRelations = relations(account, ({ one }) => ({\n  user: one(user, {\n    fields: [account.userId],\n    references: [user.id],\n  }),\n}));\n\nexport const verification = pgTable(\"verification\", {\n  id: text(\"id\").primaryKey(),\n  identifier: text(\"identifier\").notNull(),\n  value: text(\"value\").notNull(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\"),\n  updatedAt: timestamp(\"updated_at\"),\n});\n\nexport const userStackTechnologies = pgTable(\"user_stack_technology\", {\n  id: text(\"id\").primaryKey(),\n  userId: text(\"user_id\")\n    .notNull()\n    .references(() => user.id, { onDelete: \"cascade\" }),\n  name: text(\"name\").notNull(),\n  version: text(\"version\"),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const userRelations = relations(user, ({ many }) => ({\n  sessions: many(session),\n  accounts: many(account),\n  stackTechnologies: many(userStackTechnologies),\n  techStacks: many(techStack),\n}));\n\nexport const userStackTechnologiesRelations = relations(\n  userStackTechnologies,\n  ({ one }) => ({\n    user: one(user, {\n      fields: [userStackTechnologies.userId],\n      references: [user.id],\n    }),\n  })\n);\n\nexport const techStack = pgTable(\"tech_stack\", {\n  id: serial(\"id\").primaryKey(),\n  userId: text(\"user_id\")\n    .notNull()\n    .references(() => user.id, { onDelete: \"cascade\" }),\n  name: text(\"name\"),\n  description: text(\"description\"),\n  isPublic: boolean(\"is_public\").default(false).notNull(),\n  upvotes: integer(\"upvotes\").default(0).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const stackTechnologyItem = pgTable(\"stack_technology_item\", {\n  id: serial(\"id\").primaryKey(),\n  techStackId: integer(\"tech_stack_id\")\n    .notNull()\n    .references(() => techStack.id, { onDelete: \"cascade\" }),\n  technologyId: text(\"technology_id\").notNull(), // ex: \"typescript\", \"react\", or custom ID\n  name: text(\"name\").notNull(),\n  color: text(\"color\").notNull(),\n  category: text(\"category\").notNull(), // ex: \"Frontend\", \"Backend\", \"Custom\"\n});\n\nexport const techStackRelations = relations(techStack, ({ one, many }) => ({\n  user: one(user, {\n    fields: [techStack.userId],\n    references: [user.id],\n  }),\n  technologies: many(stackTechnologyItem),\n}));\n\nexport const stackTechnologyItemRelations = relations(\n  stackTechnologyItem,\n  ({ one }) => ({\n    techStack: one(techStack, {\n      fields: [stackTechnologyItem.techStackId],\n      references: [techStack.id],\n    }),\n  })\n);\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 316, "column": 0}, "map": {"version":3,"sources":["file:///Users/nathan/Desktop/next/showStack/drizzle/db/index.ts"],"sourcesContent":["import \"dotenv/config\"\n\nimport { drizzle } from \"drizzle-orm/node-postgres\"\n\nimport * as schema from \"./schema\"\n\nexport const db = drizzle(process.env.DATABASE_URL!, {\n  schema,\n})\n"],"names":[],"mappings":";;;AAAA;AAEA;AAEA;;;;;;;;AAEO,MAAM,KAAK,CAAA,GAAA,8JAAA,CAAA,UAAO,AAAD,EAAE,QAAQ,GAAG,CAAC,YAAY,EAAG;IACnD,QAAA;AACF","debugId":null}},
    {"offset": {"line": 339, "column": 0}, "map": {"version":3,"sources":["file:///Users/nathan/Desktop/next/showStack/lib/auth.ts"],"sourcesContent":["import { betterAuth } from \"better-auth\";\nimport { drizzleAdapter } from \"better-auth/adapters/drizzle\";\nimport { db } from \"@/drizzle/db\"; // your drizzle instance\n\nexport const auth = betterAuth({\n  emailAndPassword: {\n    enabled: true,\n    autoSignIn: false,\n  },\n  socialProviders: {\n    github: {\n      clientId: process.env.GITHUB_CLIENT_ID as string,\n      clientSecret: process.env.GITHUB_CLIENT_SECRET as string,\n    },\n  },\n  database: drizzleAdapter(db, {\n    provider: \"pg\",\n  }),\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AACA,kNAAmC,wBAAwB;;;;;;;;AAEpD,MAAM,OAAO,CAAA,GAAA,kKAAA,CAAA,aAAU,AAAD,EAAE;IAC7B,kBAAkB;QAChB,SAAS;QACT,YAAY;IACd;IACA,iBAAiB;QACf,QAAQ;YACN,UAAU,QAAQ,GAAG,CAAC,gBAAgB;YACtC,cAAc,QAAQ,GAAG,CAAC,oBAAoB;QAChD;IACF;IACA,UAAU,CAAA,GAAA,oLAAA,CAAA,iBAAc,AAAD,EAAE,wHAAA,CAAA,KAAE,EAAE;QAC3B,UAAU;IACZ;AACF","debugId":null}},
    {"offset": {"line": 375, "column": 0}, "map": {"version":3,"sources":["file:///Users/nathan/Desktop/next/showStack/app/api/tech/stack/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\n// import { headers } from \"next/headers\"; // Plus besoin si request.headers fonctionne\nimport { auth } from \"@/lib/auth\";\nimport { db } from \"@/drizzle/db\";\nimport { techStack, stackTechnologyItem } from \"@/drizzle/db/schema\";\nimport { eq } from \"drizzle-orm\";\n\n// Obtenir la stack technologique de l'utilisateur connecté\nexport async function GET(request: Request) {\n  try {\n    const session = await auth.api.getSession({ headers: request.headers });\n\n    if (!session?.user?.id) {\n      return NextResponse.json(\n        { error: \"Vous devez être connecté\" },\n        { status: 401 }\n      );\n    }\n\n    const userStacksResults = await db.query.techStack.findMany({\n      where: eq(techStack.userId, session.user.id),\n      with: {\n        technologies: true,\n      },\n    });\n\n    const firstUserStack =\n      userStacksResults.length > 0 ? userStacksResults[0] : null;\n\n    return NextResponse.json(\n      firstUserStack || { userId: session.user.id, technologies: [] }\n    );\n  } catch (error) {\n    console.error(\"Erreur lors de la récupération de la stack:\", error);\n    return NextResponse.json(\n      { error: \"Erreur lors de la récupération de la stack\" },\n      { status: 500 }\n    );\n  }\n}\n\n// Enregistrer la stack technologique de l'utilisateur\nexport async function POST(request: Request) {\n  try {\n    const session = await auth.api.getSession({ headers: request.headers });\n\n    if (!session?.user?.id) {\n      return NextResponse.json(\n        { error: \"Vous devez être connecté\" },\n        { status: 401 }\n      );\n    }\n\n    const { name, description, isPublic, technologies } = await request.json();\n\n    let currentStack = await db.query.techStack.findFirst({\n      where: eq(techStack.userId, session.user.id),\n    });\n\n    const stackData = {\n      userId: session.user.id,\n      name: name || currentStack?.name || \"Ma Stack\",\n      description: description || currentStack?.description || null,\n      isPublic:\n        isPublic !== undefined ? isPublic : currentStack?.isPublic || false,\n      updatedAt: new Date(),\n    };\n\n    if (currentStack) {\n      await db\n        .update(techStack)\n        .set(stackData)\n        .where(eq(techStack.id, currentStack.id));\n    } else {\n      const newStacks = await db\n        .insert(techStack)\n        .values({ ...stackData, createdAt: new Date() })\n        .returning();\n      currentStack = newStacks[0];\n    }\n\n    if (!currentStack) {\n      return NextResponse.json(\n        { error: \"Impossible de créer ou mettre à jour la stack\" },\n        { status: 500 }\n      );\n    }\n\n    await db\n      .delete(stackTechnologyItem)\n      .where(eq(stackTechnologyItem.techStackId, currentStack.id));\n\n    if (technologies && technologies.length > 0) {\n      const techItems = technologies.map((tech: any) => ({\n        techStackId: currentStack!.id,\n        technologyId: tech.technologyId || tech.id,\n        name: tech.name,\n        color: tech.color,\n        category: tech.category || \"Custom\",\n      }));\n      await db.insert(stackTechnologyItem).values(techItems);\n    }\n\n    const updatedStackWithTechnologies = await db.query.techStack.findFirst({\n      where: eq(techStack.id, currentStack.id),\n      with: {\n        technologies: true,\n      },\n    });\n\n    return NextResponse.json(updatedStackWithTechnologies);\n  } catch (error) {\n    console.error(\"Erreur lors de l'enregistrement de la stack:\", error);\n    return NextResponse.json(\n      { error: \"Erreur lors de l'enregistrement de la stack\" },\n      { status: 500 }\n    );\n  }\n}\n\n// Supprimer une technologie spécifique de la stack de l'utilisateur\nexport async function DELETE(request: Request) {\n  try {\n    const session = await auth.api.getSession({ headers: request.headers });\n\n    if (!session?.user?.id) {\n      return NextResponse.json(\n        { error: \"Vous devez être connecté\" },\n        { status: 401 }\n      );\n    }\n\n    const { searchParams } = new URL(request.url);\n    const stackTechnologyItemId = searchParams.get(\"id\");\n\n    if (!stackTechnologyItemId) {\n      return NextResponse.json(\n        { error: \"ID de la technologie manquant\" },\n        { status: 400 }\n      );\n    }\n\n    // Vérifier que l'item appartient bien à une stack de l'utilisateur actuel pour la sécurité\n    // Cela nécessite une jointure ou une requête imbriquée pour être sûr.\n    // Pour simplifier ici, on assume que si l'utilisateur est connecté, il ne peut supprimer que ses items.\n    // Une vérification plus robuste serait : trouver le techStackId de l'item, puis vérifier que techStack.userId === session.user.id.\n\n    // Tentative de conversion en nombre, car l'ID dans la DB est serial (nombre)\n    const itemIdAsNumber = parseInt(stackTechnologyItemId, 10);\n    if (isNaN(itemIdAsNumber)) {\n      return NextResponse.json(\n        { error: \"ID de la technologie invalide\" },\n        { status: 400 }\n      );\n    }\n\n    const deletedItems = await db\n      .delete(stackTechnologyItem)\n      .where(eq(stackTechnologyItem.id, itemIdAsNumber))\n      .returning(); // returning() pour confirmer la suppression\n\n    if (deletedItems.length === 0) {\n      return NextResponse.json(\n        { error: \"Technologie non trouvée ou déjà supprimée\" },\n        { status: 404 }\n      );\n    }\n\n    return NextResponse.json({ message: \"Technologie supprimée avec succès\" });\n  } catch (error) {\n    console.error(\"Erreur lors de la suppression de la technologie:\", error);\n    return NextResponse.json(\n      { error: \"Erreur lors de la suppression de la technologie\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}