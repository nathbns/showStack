{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 102, "column": 0}, "map": {"version":3,"sources":["file:///Users/nathan/Desktop/showStack/drizzle/db/schema.ts"],"sourcesContent":["import {\n  pgTable,\n  text,\n  timestamp,\n  boolean,\n  integer,\n  serial,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { eq } from \"drizzle-orm\";\n\nexport const user = pgTable(\"user\", {\n  id: text(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  emailVerified: boolean(\"email_verified\").notNull(),\n  image: text(\"image\"),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").notNull(),\n  updatedAt: timestamp(\"updated_at\").notNull(),\n  layoutConfig: text(\"layout_config\"),\n});\n\nexport const session = pgTable(\"session\", {\n  id: text(\"id\").primaryKey(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  token: text(\"token\").notNull().unique(),\n  createdAt: timestamp(\"created_at\").notNull(),\n  updatedAt: timestamp(\"updated_at\").notNull(),\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  userId: text(\"user_id\")\n    .notNull()\n    .references(() => user.id, { onDelete: \"cascade\" }),\n});\n\nexport const sessionRelations = relations(session, ({ one }) => ({\n  user: one(user, {\n    fields: [session.userId],\n    references: [user.id],\n  }),\n}));\n\nexport const account = pgTable(\"account\", {\n  id: text(\"id\").primaryKey(),\n  accountId: text(\"account_id\").notNull(),\n  providerId: text(\"provider_id\").notNull(),\n  userId: text(\"user_id\")\n    .notNull()\n    .references(() => user.id, { onDelete: \"cascade\" }),\n  accessToken: text(\"access_token\"),\n  refreshToken: text(\"refresh_token\"),\n  idToken: text(\"id_token\"),\n  accessTokenExpiresAt: timestamp(\"access_token_expires_at\"),\n  refreshTokenExpiresAt: timestamp(\"refresh_token_expires_at\"),\n  scope: text(\"scope\"),\n  password: text(\"password\"),\n  createdAt: timestamp(\"created_at\").notNull(),\n  updatedAt: timestamp(\"updated_at\").notNull(),\n});\n\nexport const accountRelations = relations(account, ({ one }) => ({\n  user: one(user, {\n    fields: [account.userId],\n    references: [user.id],\n  }),\n}));\n\nexport const verification = pgTable(\"verification\", {\n  id: text(\"id\").primaryKey(),\n  identifier: text(\"identifier\").notNull(),\n  value: text(\"value\").notNull(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\"),\n  updatedAt: timestamp(\"updated_at\"),\n});\n\nexport const userStackTechnologies = pgTable(\"user_stack_technology\", {\n  id: text(\"id\").primaryKey(),\n  userId: text(\"user_id\")\n    .notNull()\n    .references(() => user.id, { onDelete: \"cascade\" }),\n  name: text(\"name\").notNull(),\n  version: text(\"version\"),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const userRelations = relations(user, ({ many }) => ({\n  sessions: many(session),\n  accounts: many(account),\n  stackTechnologies: many(userStackTechnologies),\n  techStacks: many(techStack),\n}));\n\nexport const userStackTechnologiesRelations = relations(\n  userStackTechnologies,\n  ({ one }) => ({\n    user: one(user, {\n      fields: [userStackTechnologies.userId],\n      references: [user.id],\n    }),\n  })\n);\n\nexport const techStack = pgTable(\"tech_stack\", {\n  id: serial(\"id\").primaryKey(),\n  userId: text(\"user_id\")\n    .notNull()\n    .references(() => user.id, { onDelete: \"cascade\" }),\n  name: text(\"name\"),\n  upvotes: integer(\"upvotes\").default(0).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const stackTechnologyItem = pgTable(\"stack_technology_item\", {\n  id: serial(\"id\").primaryKey(),\n  techStackId: integer(\"tech_stack_id\")\n    .notNull()\n    .references(() => techStack.id, { onDelete: \"cascade\" }),\n  technologyId: text(\"technology_id\").notNull(), // ex: \"typescript\", \"react\", or custom ID\n  name: text(\"name\").notNull(),\n  color: text(\"color\").notNull(),\n  category: text(\"category\").notNull(), // ex: \"Frontend\", \"Backend\", \"Custom\"\n  gridCols: integer(\"grid_cols\").default(1),\n  gridRows: integer(\"grid_rows\").default(1),\n  isProject: boolean(\"is_project\").default(false),\n  favicon: text(\"favicon\"),\n  url: text(\"url\"),\n  description: text(\"description\"),\n  order: integer(\"order\").default(0),\n  stars: integer(\"stars\").default(0),\n  forks: integer(\"forks\").default(0),\n});\n\nexport const techStackRelations = relations(techStack, ({ one, many }) => ({\n  user: one(user, {\n    fields: [techStack.userId],\n    references: [user.id],\n  }),\n  technologies: many(stackTechnologyItem),\n}));\n\nexport const stackTechnologyItemRelations = relations(\n  stackTechnologyItem,\n  ({ one }) => ({\n    techStack: one(techStack, {\n      fields: [stackTechnologyItem.techStackId],\n      references: [techStack.id],\n    }),\n  })\n);\n\n/*\n// Requête préparée pour récupérer les technologies d'une stack avec toutes les colonnes\nexport const getTechStackWithTechnologies = (db) => async (stackId) => {\n  const result = await db.query.techStack.findFirst({\n    where: eq(techStack.id, stackId),\n    with: {\n      technologies: true\n    },\n  });\n  return result;\n};\n*/\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 288, "column": 0}, "map": {"version":3,"sources":["file:///Users/nathan/Desktop/showStack/drizzle/db/index.ts"],"sourcesContent":["import \"dotenv/config\";\n\nimport { drizzle } from \"drizzle-orm/node-postgres\";\nimport { Pool } from \"pg\";\n\nimport * as schema from \"./schema\";\n\n// Vérifier si DATABASE_URL est définie\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL environment variable is not set or accessible.\"\n  );\n}\n\n// Créer un Pool de connexions\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL, // DATABASE_URL doit contenir ?sslmode=require\n});\n\n// Initialiser Drizzle avec le pool et le schéma\nexport const db = drizzle(pool, { schema });\n"],"names":[],"mappings":";;;AAAA;AAEA;AACA;AAEA;;;;;;;;;;AAEA,uCAAuC;AACvC,IAAI,CAAC,QAAQ,GAAG,CAAC,YAAY,EAAE;IAC7B,MAAM,IAAI,MACR;AAEJ;AAEA,8BAA8B;AAC9B,MAAM,OAAO,IAAI,oGAAA,CAAA,OAAI,CAAC;IACpB,kBAAkB,QAAQ,GAAG,CAAC,YAAY;AAC5C;AAGO,MAAM,KAAK,CAAA,GAAA,8JAAA,CAAA,UAAO,AAAD,EAAE,MAAM;IAAE,QAAA;AAAO","debugId":null}},
    {"offset": {"line": 322, "column": 0}, "map": {"version":3,"sources":["file:///Users/nathan/Desktop/showStack/app/api/users/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport { db } from \"@/drizzle/db\";\nimport { user } from \"@/drizzle/db/schema\";\n// Vous pourriez vouloir ajouter une authentification ou une restriction ici\n// si vous ne voulez pas que cette liste soit complètement publique.\n\nexport async function GET(request: Request) {\n  try {\n    const allUsers = await db.query.user.findMany({\n      // Vous pouvez ajouter des options ici si nécessaire, par exemple :\n      // orderBy: (user, { asc }) => [asc(user.name)],\n      // columns: { id: true, name: true, email: true, image: true }, // Pour ne sélectionner que certains champs\n    });\n\n    return NextResponse.json(allUsers);\n  } catch (error) {\n    console.error(\"Error fetching all users:\", error);\n    return NextResponse.json(\n      { error: \"Failed to fetch users\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;;;;;AAKO,eAAe,IAAI,OAAgB;IACxC,IAAI;QACF,MAAM,WAAW,MAAM,wHAAA,CAAA,KAAE,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC;QAI9C;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}