{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 150, "column": 0}, "map": {"version":3,"sources":["file:///Users/nathan/Desktop/showStack/drizzle/db/schema.ts"],"sourcesContent":["import {\n  pgTable,\n  text,\n  timestamp,\n  boolean,\n  integer,\n  serial,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { eq } from \"drizzle-orm\";\n\nexport const user = pgTable(\"user\", {\n  id: text(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  emailVerified: boolean(\"email_verified\").notNull(),\n  image: text(\"image\"),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").notNull(),\n  updatedAt: timestamp(\"updated_at\").notNull(),\n  layoutConfig: text(\"layout_config\"),\n});\n\nexport const session = pgTable(\"session\", {\n  id: text(\"id\").primaryKey(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  token: text(\"token\").notNull().unique(),\n  createdAt: timestamp(\"created_at\").notNull(),\n  updatedAt: timestamp(\"updated_at\").notNull(),\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  userId: text(\"user_id\")\n    .notNull()\n    .references(() => user.id, { onDelete: \"cascade\" }),\n});\n\nexport const sessionRelations = relations(session, ({ one }) => ({\n  user: one(user, {\n    fields: [session.userId],\n    references: [user.id],\n  }),\n}));\n\nexport const account = pgTable(\"account\", {\n  id: text(\"id\").primaryKey(),\n  accountId: text(\"account_id\").notNull(),\n  providerId: text(\"provider_id\").notNull(),\n  userId: text(\"user_id\")\n    .notNull()\n    .references(() => user.id, { onDelete: \"cascade\" }),\n  accessToken: text(\"access_token\"),\n  refreshToken: text(\"refresh_token\"),\n  idToken: text(\"id_token\"),\n  accessTokenExpiresAt: timestamp(\"access_token_expires_at\"),\n  refreshTokenExpiresAt: timestamp(\"refresh_token_expires_at\"),\n  scope: text(\"scope\"),\n  password: text(\"password\"),\n  createdAt: timestamp(\"created_at\").notNull(),\n  updatedAt: timestamp(\"updated_at\").notNull(),\n});\n\nexport const accountRelations = relations(account, ({ one }) => ({\n  user: one(user, {\n    fields: [account.userId],\n    references: [user.id],\n  }),\n}));\n\nexport const verification = pgTable(\"verification\", {\n  id: text(\"id\").primaryKey(),\n  identifier: text(\"identifier\").notNull(),\n  value: text(\"value\").notNull(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\"),\n  updatedAt: timestamp(\"updated_at\"),\n});\n\nexport const userStackTechnologies = pgTable(\"user_stack_technology\", {\n  id: text(\"id\").primaryKey(),\n  userId: text(\"user_id\")\n    .notNull()\n    .references(() => user.id, { onDelete: \"cascade\" }),\n  name: text(\"name\").notNull(),\n  version: text(\"version\"),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const userRelations = relations(user, ({ many }) => ({\n  sessions: many(session),\n  accounts: many(account),\n  stackTechnologies: many(userStackTechnologies),\n  techStacks: many(techStack),\n  posts: many(post),\n  comments: many(comment),\n  likes: many(like),\n  followers: many(follow, { relationName: \"followed\" }),\n  following: many(follow, { relationName: \"follower\" }),\n  notifications: many(notification),\n}));\n\nexport const userStackTechnologiesRelations = relations(\n  userStackTechnologies,\n  ({ one }) => ({\n    user: one(user, {\n      fields: [userStackTechnologies.userId],\n      references: [user.id],\n    }),\n  })\n);\n\nexport const techStack = pgTable(\"tech_stack\", {\n  id: serial(\"id\").primaryKey(),\n  userId: text(\"user_id\")\n    .notNull()\n    .references(() => user.id, { onDelete: \"cascade\" }),\n  name: text(\"name\"),\n  upvotes: integer(\"upvotes\").default(0).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const stackTechnologyItem = pgTable(\"stack_technology_item\", {\n  id: serial(\"id\").primaryKey(),\n  techStackId: integer(\"tech_stack_id\")\n    .notNull()\n    .references(() => techStack.id, { onDelete: \"cascade\" }),\n  technologyId: text(\"technology_id\").notNull(), // ex: \"typescript\", \"react\", or custom ID\n  name: text(\"name\").notNull(),\n  color: text(\"color\").notNull(),\n  category: text(\"category\").notNull(), // ex: \"Frontend\", \"Backend\", \"Custom\"\n  gridCols: integer(\"grid_cols\").default(1),\n  gridRows: integer(\"grid_rows\").default(1),\n  isProject: boolean(\"is_project\").default(false),\n  favicon: text(\"favicon\"),\n  url: text(\"url\"),\n  description: text(\"description\"),\n  order: integer(\"order\").default(0),\n});\n\nexport const techStackRelations = relations(techStack, ({ one, many }) => ({\n  user: one(user, {\n    fields: [techStack.userId],\n    references: [user.id],\n  }),\n  technologies: many(stackTechnologyItem),\n}));\n\nexport const stackTechnologyItemRelations = relations(\n  stackTechnologyItem,\n  ({ one }) => ({\n    techStack: one(techStack, {\n      fields: [stackTechnologyItem.techStackId],\n      references: [techStack.id],\n    }),\n  })\n);\n\n/*\n// Requête préparée pour récupérer les technologies d'une stack avec toutes les colonnes\nexport const getTechStackWithTechnologies = (db) => async (stackId) => {\n  const result = await db.query.techStack.findFirst({\n    where: eq(techStack.id, stackId),\n    with: {\n      technologies: true\n    },\n  });\n  return result;\n};\n*/\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 344, "column": 0}, "map": {"version":3,"sources":["file:///Users/nathan/Desktop/showStack/drizzle/db/index.ts"],"sourcesContent":["import \"dotenv/config\";\n\nimport { drizzle } from \"drizzle-orm/node-postgres\";\nimport { Pool } from \"pg\";\n\nimport * as schema from \"./schema\";\n\n// Vérifier si DATABASE_URL est définie\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL environment variable is not set or accessible.\"\n  );\n}\n\n// Créer un Pool de connexions\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL, // DATABASE_URL doit contenir ?sslmode=require\n});\n\n// Initialiser Drizzle avec le pool et le schéma\nexport const db = drizzle(pool, { schema });\n"],"names":[],"mappings":";;;AAAA;AAEA;AACA;AAEA;;;;;;;;;;AAEA,uCAAuC;AACvC,IAAI,CAAC,QAAQ,GAAG,CAAC,YAAY,EAAE;IAC7B,MAAM,IAAI,MACR;AAEJ;AAEA,8BAA8B;AAC9B,MAAM,OAAO,IAAI,oGAAA,CAAA,OAAI,CAAC;IACpB,kBAAkB,QAAQ,GAAG,CAAC,YAAY;AAC5C;AAGO,MAAM,KAAK,CAAA,GAAA,8JAAA,CAAA,UAAO,AAAD,EAAE,MAAM;IAAE,QAAA;AAAO","debugId":null}},
    {"offset": {"line": 378, "column": 0}, "map": {"version":3,"sources":["file:///Users/nathan/Desktop/showStack/lib/auth.ts"],"sourcesContent":["import { betterAuth } from \"better-auth\";\nimport { drizzleAdapter } from \"better-auth/adapters/drizzle\";\nimport { db } from \"@/drizzle/db\"; // your drizzle instance\n// Importer user seulement si vous avez besoin de typer explicitement le retour de mapProfileToUser\n// import { user } from \"@/drizzle/db/schema\";\n\nexport const auth = betterAuth({\n  emailAndPassword: {\n    enabled: false,\n    autoSignIn: false,\n  },\n  socialProviders: {\n    github: {\n      clientId: process.env.GITHUB_CLIENT_ID as string,\n      clientSecret: process.env.GITHUB_CLIENT_SECRET as string,\n      overrideUserInfoOnSignIn: true,\n      scope: [\"user:email\", \"read:user\"],\n      mapProfileToUser: (profile: any) => {\n        console.log(\"GitHub Profile Bio:\", profile.bio);\n\n        if (profile.bio) {\n          setTimeout(async () => {\n            try {\n              await db.execute(`\n                UPDATE \"user\" \n                SET description = '${profile.bio.replace(/'/g, \"''\")}'\n                WHERE email = '${profile.email}'\n              `);\n              console.log(\"✅ Description mise à jour manuellement en DB\");\n            } catch (e) {\n              console.error(\"❌ Erreur lors de la mise à jour manuelle:\", e);\n            }\n          }, 1000);\n        }\n\n        return {\n          description: profile.bio,\n        };\n      },\n    },\n  },\n  database: drizzleAdapter(db, {\n    provider: \"pg\",\n  }),\n  callbacks: {\n    session: ({ session, user }: { session: any; user: any }) => {\n      console.log(\"SESSION CALLBACK - USER:\", JSON.stringify(user, null, 2));\n      console.log(\n        \"SESSION CALLBACK - ORIGINAL SESSION:\",\n        JSON.stringify(session, null, 2)\n      );\n\n      if (user && user.description) {\n        session.user.description = user.description;\n        console.log(\"✅ Description ajoutée à la session:\", user.description);\n      } else {\n        console.log(\"❌ Pas de description dans l'objet user\");\n      }\n\n      console.log(\n        \"SESSION CALLBACK - SESSION FINALE:\",\n        JSON.stringify(session, null, 2)\n      );\n      return session;\n    },\n  },\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AACA,kNAAmC,wBAAwB;;;;;;;;AAIpD,MAAM,OAAO,CAAA,GAAA,kKAAA,CAAA,aAAU,AAAD,EAAE;IAC7B,kBAAkB;QAChB,SAAS;QACT,YAAY;IACd;IACA,iBAAiB;QACf,QAAQ;YACN,UAAU,QAAQ,GAAG,CAAC,gBAAgB;YACtC,cAAc,QAAQ,GAAG,CAAC,oBAAoB;YAC9C,0BAA0B;YAC1B,OAAO;gBAAC;gBAAc;aAAY;YAClC,kBAAkB,CAAC;gBACjB,QAAQ,GAAG,CAAC,uBAAuB,QAAQ,GAAG;gBAE9C,IAAI,QAAQ,GAAG,EAAE;oBACf,WAAW;wBACT,IAAI;4BACF,MAAM,wHAAA,CAAA,KAAE,CAAC,OAAO,CAAC,CAAC;;mCAEG,EAAE,QAAQ,GAAG,CAAC,OAAO,CAAC,MAAM,MAAM;+BACtC,EAAE,QAAQ,KAAK,CAAC;cACjC,CAAC;4BACD,QAAQ,GAAG,CAAC;wBACd,EAAE,OAAO,GAAG;4BACV,QAAQ,KAAK,CAAC,6CAA6C;wBAC7D;oBACF,GAAG;gBACL;gBAEA,OAAO;oBACL,aAAa,QAAQ,GAAG;gBAC1B;YACF;QACF;IACF;IACA,UAAU,CAAA,GAAA,oLAAA,CAAA,iBAAc,AAAD,EAAE,wHAAA,CAAA,KAAE,EAAE;QAC3B,UAAU;IACZ;IACA,WAAW;QACT,SAAS,CAAC,EAAE,OAAO,EAAE,IAAI,EAA+B;YACtD,QAAQ,GAAG,CAAC,4BAA4B,KAAK,SAAS,CAAC,MAAM,MAAM;YACnE,QAAQ,GAAG,CACT,wCACA,KAAK,SAAS,CAAC,SAAS,MAAM;YAGhC,IAAI,QAAQ,KAAK,WAAW,EAAE;gBAC5B,QAAQ,IAAI,CAAC,WAAW,GAAG,KAAK,WAAW;gBAC3C,QAAQ,GAAG,CAAC,uCAAuC,KAAK,WAAW;YACrE,OAAO;gBACL,QAAQ,GAAG,CAAC;YACd;YAEA,QAAQ,GAAG,CACT,sCACA,KAAK,SAAS,CAAC,SAAS,MAAM;YAEhC,OAAO;QACT;IACF;AACF","debugId":null}},
    {"offset": {"line": 453, "column": 0}, "map": {"version":3,"sources":["file:///Users/nathan/Desktop/showStack/app/api/user/tag/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport { auth } from \"@/lib/auth\";\nimport { db } from \"@/drizzle/db\";\nimport { userTag } from \"@/drizzle/db/schema\";\nimport { eq } from \"drizzle-orm\";\n\n// Récupérer tous les tags de l'utilisateur connecté\nexport async function GET(request: Request) {\n  try {\n    const session = await auth.api.getSession({\n      headers: request.headers,\n    });\n\n    if (!session?.user?.id) {\n      return NextResponse.json({ error: \"Non autorisé\" }, { status: 401 });\n    }\n\n    const tags = await db.query.userTag.findMany({\n      where: eq(userTag.userId, session.user.id),\n      orderBy: (userTag, { asc }) => [asc(userTag.name)],\n    });\n\n    return NextResponse.json(tags);\n  } catch (error) {\n    console.error(\"Erreur lors de la récupération des tags:\", error);\n    return NextResponse.json(\n      { error: \"Erreur lors de la récupération des tags\" },\n      { status: 500 }\n    );\n  }\n}\n\n// Créer un nouveau tag\nexport async function POST(request: Request) {\n  try {\n    const session = await auth.api.getSession({\n      headers: request.headers,\n    });\n\n    if (!session?.user?.id) {\n      return NextResponse.json({ error: \"Non autorisé\" }, { status: 401 });\n    }\n\n    const { name, color } = await request.json();\n\n    if (!name || typeof name !== \"string\") {\n      return NextResponse.json({ error: \"Nom de tag requis\" }, { status: 400 });\n    }\n\n    // Vérifier si ce tag existe déjà pour l'utilisateur\n    const existingTags = await db.query.userTag.findMany({\n      where: (userTag) =>\n        eq(userTag.userId, session.user.id) && eq(userTag.name, name),\n    });\n\n    if (existingTags.length > 0) {\n      return NextResponse.json(\n        { error: \"Ce tag existe déjà\" },\n        { status: 400 }\n      );\n    }\n\n    // Créer le nouveau tag\n    const newTag = await db\n      .insert(userTag)\n      .values({\n        userId: session.user.id,\n        name,\n        color: color || \"#3B82F6\", // Couleur par défaut si non spécifiée\n      })\n      .returning();\n\n    return NextResponse.json(newTag[0]);\n  } catch (error) {\n    console.error(\"Erreur lors de la création du tag:\", error);\n    return NextResponse.json(\n      { error: \"Erreur lors de la création du tag\" },\n      { status: 500 }\n    );\n  }\n}\n\n// Supprimer un tag\nexport async function DELETE(request: Request) {\n  try {\n    const session = await auth.api.getSession({\n      headers: request.headers,\n    });\n\n    if (!session?.user?.id) {\n      return NextResponse.json({ error: \"Non autorisé\" }, { status: 401 });\n    }\n\n    const { searchParams } = new URL(request.url);\n    const tagId = searchParams.get(\"id\");\n\n    if (!tagId) {\n      return NextResponse.json({ error: \"ID du tag requis\" }, { status: 400 });\n    }\n\n    // Vérifier que le tag appartient à l'utilisateur\n    const tag = await db.query.userTag.findFirst({\n      where: (userTag) =>\n        eq(userTag.id, parseInt(tagId)) && eq(userTag.userId, session.user.id),\n    });\n\n    if (!tag) {\n      return NextResponse.json(\n        { error: \"Tag non trouvé ou vous n'avez pas les droits\" },\n        { status: 404 }\n      );\n    }\n\n    // Supprimer le tag\n    await db.delete(userTag).where(eq(userTag.id, parseInt(tagId)));\n\n    return NextResponse.json({ success: true });\n  } catch (error) {\n    console.error(\"Erreur lors de la suppression du tag:\", error);\n    return NextResponse.json(\n      { error: \"Erreur lors de la suppression du tag\" },\n      { status: 500 }\n    );\n  }\n}\n\n// Mettre à jour un tag (couleur)\nexport async function PUT(request: Request) {\n  try {\n    const session = await auth.api.getSession({\n      headers: request.headers,\n    });\n\n    if (!session?.user?.id) {\n      return NextResponse.json({ error: \"Non autorisé\" }, { status: 401 });\n    }\n\n    const { id, color } = await request.json();\n\n    if (!id) {\n      return NextResponse.json({ error: \"ID du tag requis\" }, { status: 400 });\n    }\n\n    // Vérifier que le tag appartient à l'utilisateur\n    const tag = await db.query.userTag.findFirst({\n      where: (userTag) =>\n        eq(userTag.id, id) && eq(userTag.userId, session.user.id),\n    });\n\n    if (!tag) {\n      return NextResponse.json(\n        { error: \"Tag non trouvé ou vous n'avez pas les droits\" },\n        { status: 404 }\n      );\n    }\n\n    // Mettre à jour le tag\n    const updatedTag = await db\n      .update(userTag)\n      .set({ color })\n      .where(eq(userTag.id, id))\n      .returning();\n\n    return NextResponse.json(updatedTag[0]);\n  } catch (error) {\n    console.error(\"Erreur lors de la mise à jour du tag:\", error);\n    return NextResponse.json(\n      { error: \"Erreur lors de la mise à jour du tag\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}